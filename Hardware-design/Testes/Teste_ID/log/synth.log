Qflow synthesis logfile created on seg jan 8 22:55:03 -02 2018
Running yosys for verilog parsing and synthesis
yosys  -s NRISC_InstructionDecoder.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `NRISC_InstructionDecoder.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v' to AST representation.
Generating RTLIL representation for module `\NRISC_InstructionDecoder'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \NRISC_InstructionDecoder

3.1.2. Analyzing design hierarchy..
Top module:  \NRISC_InstructionDecoder
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 6 dead cases from process $proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1 in module NRISC_InstructionDecoder.
Removed a total of 6 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
     1/87: $5\CORE_ULA_ctrl[3:0]
     2/87: $4\CORE_DATA_ctrl[2:0]
     3/87: $4\CORE_DATA_REGMux[0:0]
     4/87: $4\CORE_DATA_load[0:0]
     5/87: $3\CORE_DATA_ctrl[2:0]
     6/87: $7\CORE_PC_ctrl[1:0]
     7/87: $6\CORE_PC_ctrl[1:0]
     8/87: $5\CORE_PC_ctrl[1:0]
     9/87: $5\CORE_InstructionToULAMux[1:0]
    10/87: $5\CORE_REG_RF1[3:0]
    11/87: $4\CORE_PC_ctrl[1:0]
    12/87: $4\CORE_STACK_ctrl[1:0]
    13/87: $4\CORE_ULA_ctrl[3:0]
    14/87: $4\CORE_InstructionToULAMux[1:0]
    15/87: $4\CORE_REG_write[0:0]
    16/87: $4\CORE_REG_RF2[3:0]
    17/87: $4\CORE_REG_RF1[3:0]
    18/87: $7\CORE_Status_ctrl[3:3]
    19/87: $4\CORE_Status_ctrl[2:0] [2:1]
    20/87: $5\CORE_Status_ctrl[2:1]
    21/87: $4\CORE_Status_ctrl[2:0] [0]
    22/87: $4\CORE_INT_ctrl[1:0]
    23/87: $4\CORE_INT_CHA[7:0]
    24/87: $6\CORE_Status_ctrl[0:0]
    25/87: $3\CORE_PC_ctrl[1:0]
    26/87: $3\CORE_STACK_ctrl[1:0]
    27/87: $3\CORE_DATA_ADDR_mux[0:0]
    28/87: $3\CORE_DATA_REGMux[0:0]
    29/87: $3\CORE_DATA_write[0:0]
    30/87: $3\CORE_DATA_load[0:0]
    31/87: $3\CORE_REG_write[0:0]
    32/87: $3\CORE_INT_ctrl[1:0]
    33/87: $3\CORE_INT_CHA[7:0]
    34/87: $3\CORE_Status_ctrl[3:0] [2:0]
    35/87: $3\CORE_REG_RF2[3:0]
    36/87: $3\CORE_REG_RF1[3:0]
    37/87: $3\CORE_ULA_ctrl[3:0]
    38/87: $3\CORE_InstructionToULAMux[1:0]
    39/87: $3\CORE_Status_ctrl[3:0] [3]
    40/87: $2\CORE_INT_ctrl[1:0]
    41/87: $2\CORE_INT_CHA[7:0]
    42/87: $2\CORE_PC_ctrl[1:0]
    43/87: $2\CORE_STACK_ctrl[1:0]
    44/87: $2\CORE_DATA_REGMux[0:0]
    45/87: $2\CORE_DATA_ADDR_mux[0:0]
    46/87: $2\CORE_DATA_load[0:0]
    47/87: $2\CORE_DATA_write[0:0]
    48/87: $2\CORE_REG_write[0:0]
    49/87: $2\CORE_REG_RF2[3:0]
    50/87: $2\CORE_REG_RF1[3:0]
    51/87: $2\CORE_ULA_ctrl[3:0]
    52/87: $2\CORE_InstructionToULAMux[1:0]
    53/87: $2\CORE_Status_ctrl[3:0]
    54/87: $2\CORE_DATA_ctrl[2:0]
    55/87: $2\CORE_REG_RD[3:0]
    56/87: $1\CORE_INT_ctrl[1:0]
    57/87: $1\CORE_INT_CHA[7:0]
    58/87: $1\CORE_PC_ctrl[1:0]
    59/87: $1\CORE_STACK_ctrl[1:0]
    60/87: $1\CORE_DATA_REGMux[0:0]
    61/87: $1\CORE_DATA_ctrl[2:0]
    62/87: $1\CORE_DATA_ADDR_mux[0:0]
    63/87: $1\CORE_DATA_load[0:0]
    64/87: $1\CORE_DATA_write[0:0]
    65/87: $1\CORE_REG_write[0:0]
    66/87: $1\CORE_REG_RF2[3:0]
    67/87: $1\CORE_REG_RF1[3:0]
    68/87: $1\CORE_REG_RD[3:0]
    69/87: $1\CORE_ULA_ctrl[3:0]
    70/87: $1\CORE_InstructionToULAMux[1:0]
    71/87: $1\CORE_Status_ctrl[3:0]
    72/87: $0\CORE_INT_ctrl[1:0]
    73/87: $0\CORE_INT_CHA[7:0]
    74/87: $0\CORE_PC_ctrl[1:0]
    75/87: $0\CORE_STACK_ctrl[1:0]
    76/87: $0\CORE_DATA_REGMux[0:0]
    77/87: $0\CORE_DATA_ctrl[2:0]
    78/87: $0\CORE_DATA_ADDR_mux[0:0]
    79/87: $0\CORE_DATA_load[0:0]
    80/87: $0\CORE_DATA_write[0:0]
    81/87: $0\CORE_REG_write[0:0]
    82/87: $0\CORE_REG_RF2[3:0]
    83/87: $0\CORE_REG_RF1[3:0]
    84/87: $0\CORE_REG_RD[3:0]
    85/87: $0\CORE_ULA_ctrl[3:0]
    86/87: $0\CORE_InstructionToULAMux[1:0]
    87/87: $0\CORE_Status_ctrl[3:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\NRISC_InstructionDecoder.\CORE_Status_ctrl [3:0]' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$799' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_InstructionToULAMux' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$800' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_ULA_ctrl' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$801' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_REG_RD' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$802' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_REG_RF1' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$803' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_REG_RF2' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$804' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_REG_write' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$805' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_DATA_write' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$806' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_DATA_load' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$807' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_DATA_ADDR_mux' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$808' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_DATA_ctrl' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$809' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_DATA_REGMux' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$810' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_STACK_ctrl' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$811' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_PC_ctrl' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$812' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_INT_CHA' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$813' with positive edge clock.
Creating register for signal `\NRISC_InstructionDecoder.\CORE_INT_ctrl' using process `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
  created $dff cell `$procdff$814' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 13 empty switches in `\NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
Removing empty process `NRISC_InstructionDecoder.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:79$1'.
Cleaned up 13 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$procmux$18_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$28_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$32_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$44_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$48_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$60_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$64_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$79_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$90_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$96_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$108_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$110_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$114_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$123_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$127_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$136_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$140_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$149_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$153_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$163_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$167_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$169_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$179_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$183_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$185_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$195_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$199_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$201_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$211_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$215_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$217_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$227_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$231_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$233_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$243_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$247_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$249_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$259_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$263_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$265_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$278_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$280_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$293_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$317_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$319_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$321_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$323_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$295_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$297_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$299_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$391_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$395_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$397_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$399_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$337_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$339_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$341_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$354_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$356_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$358_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$360_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$373_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$375_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$377_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$408_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$410_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$412_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$421_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$423_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$425_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$434_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$436_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$438_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$447_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$449_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$451_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$460_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$462_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$464_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$473_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$475_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$477_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$486_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$488_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$490_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$499_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$501_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$503_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$512_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$514_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$516_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$525_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$527_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$529_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$538_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$540_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$542_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$551_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$553_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$555_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$564_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$566_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$568_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$577_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$579_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$581_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$590_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$592_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$594_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$602_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$604_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$612_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$614_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$622_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$624_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$632_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$634_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$642_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$644_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$652_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$654_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$662_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$664_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$672_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$674_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$682_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$684_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$692_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$694_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$702_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$704_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$712_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$714_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$722_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$724_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$732_CMP0' in module `NRISC_InstructionDecoder' with $logic_not.
Replacing $eq cell `$procmux$734_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$742_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$750_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$753_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$756_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$759_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$762_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$765_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$768_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$771_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$774_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$777_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$780_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$783_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$786_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$789_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$792_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$795_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Replacing $eq cell `$procmux$798_CMP0' in module `NRISC_InstructionDecoder' with inverter.
Optimizing away select inverter for $mux cell `$procmux$31' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$47' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$63' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$78' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$95' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$113' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$126' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$139' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$152' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$168' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$184' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$200' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$216' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$232' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$248' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$264' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$279' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$318' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$322' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$294' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$298' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$394' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$398' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$336' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$340' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$355' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$359' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$372' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$376' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$411' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$424' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$437' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$450' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$463' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$476' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$489' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$502' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$515' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$528' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$541' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$554' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$567' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$580' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$593' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$603' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$613' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$623' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$633' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$643' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$653' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$663' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$673' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$683' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$693' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$703' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$713' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$723' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$733' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$741' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $mux cell `$procmux$749' in module `NRISC_InstructionDecoder'.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..
  removing unused `$not' cell `$procmux$32_CMP0'.
  removing unused `$not' cell `$procmux$48_CMP0'.
  removing unused `$not' cell `$procmux$64_CMP0'.
  removing unused `$not' cell `$procmux$79_CMP0'.
  removing unused `$not' cell `$procmux$96_CMP0'.
  removing unused `$not' cell `$procmux$114_CMP0'.
  removing unused `$not' cell `$procmux$127_CMP0'.
  removing unused `$not' cell `$procmux$140_CMP0'.
  removing unused `$not' cell `$procmux$153_CMP0'.
  removing unused `$not' cell `$procmux$169_CMP0'.
  removing unused `$not' cell `$procmux$185_CMP0'.
  removing unused `$not' cell `$procmux$201_CMP0'.
  removing unused `$not' cell `$procmux$217_CMP0'.
  removing unused `$not' cell `$procmux$233_CMP0'.
  removing unused `$not' cell `$procmux$249_CMP0'.
  removing unused `$not' cell `$procmux$265_CMP0'.
  removing unused `$not' cell `$procmux$280_CMP0'.
  removing unused `$not' cell `$procmux$295_CMP0'.
  removing unused `$not' cell `$procmux$299_CMP0'.
  removing unused `$not' cell `$procmux$319_CMP0'.
  removing unused `$not' cell `$procmux$323_CMP0'.
  removing unused `$not' cell `$procmux$337_CMP0'.
  removing unused `$not' cell `$procmux$341_CMP0'.
  removing unused `$not' cell `$procmux$356_CMP0'.
  removing unused `$not' cell `$procmux$360_CMP0'.
  removing unused `$not' cell `$procmux$373_CMP0'.
  removing unused `$not' cell `$procmux$377_CMP0'.
  removing unused `$not' cell `$procmux$395_CMP0'.
  removing unused `$not' cell `$procmux$399_CMP0'.
  removing unused `$not' cell `$procmux$412_CMP0'.
  removing unused `$not' cell `$procmux$425_CMP0'.
  removing unused `$not' cell `$procmux$438_CMP0'.
  removing unused `$not' cell `$procmux$451_CMP0'.
  removing unused `$not' cell `$procmux$464_CMP0'.
  removing unused `$not' cell `$procmux$477_CMP0'.
  removing unused `$not' cell `$procmux$490_CMP0'.
  removing unused `$not' cell `$procmux$503_CMP0'.
  removing unused `$not' cell `$procmux$516_CMP0'.
  removing unused `$not' cell `$procmux$529_CMP0'.
  removing unused `$not' cell `$procmux$542_CMP0'.
  removing unused `$not' cell `$procmux$555_CMP0'.
  removing unused `$not' cell `$procmux$568_CMP0'.
  removing unused `$not' cell `$procmux$581_CMP0'.
  removing unused `$not' cell `$procmux$594_CMP0'.
  removing unused `$not' cell `$procmux$604_CMP0'.
  removing unused `$not' cell `$procmux$614_CMP0'.
  removing unused `$not' cell `$procmux$624_CMP0'.
  removing unused `$not' cell `$procmux$634_CMP0'.
  removing unused `$not' cell `$procmux$644_CMP0'.
  removing unused `$not' cell `$procmux$654_CMP0'.
  removing unused `$not' cell `$procmux$664_CMP0'.
  removing unused `$not' cell `$procmux$674_CMP0'.
  removing unused `$not' cell `$procmux$684_CMP0'.
  removing unused `$not' cell `$procmux$694_CMP0'.
  removing unused `$not' cell `$procmux$704_CMP0'.
  removing unused `$not' cell `$procmux$714_CMP0'.
  removing unused `$not' cell `$procmux$724_CMP0'.
  removing unused `$not' cell `$procmux$734_CMP0'.
  removing unused `$not' cell `$procmux$742_CMP0'.
  removing unused `$not' cell `$procmux$750_CMP0'.

3.5. Executing CHECK pass (checking for obvious problems).
checking module NRISC_InstructionDecoder..
Warning: Wire NRISC_InstructionDecoder.\CORE_ULAMux_inc_dec is used but has no driver.
Warning: Wire NRISC_InstructionDecoder.\CORE_Status_ctrl [4] is used but has no driver.
Warning: Wire NRISC_InstructionDecoder.\CORE_PC_clk is used but has no driver.
found and reported 3 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
  Cell `$procmux$123_CMP0' is identical to cell `$procmux$110_CMP0'.
    Redirecting output \Y: $procmux$123_CMP [0] = $procmux$110_CMP [0]
    Removing $logic_not cell `$procmux$123_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$123_CMP1' is identical to cell `$procmux$110_CMP1'.
    Redirecting output \Y: $procmux$123_CMP [1] = $procmux$110_CMP [1]
    Removing $eq cell `$procmux$123_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$123_CMP2' is identical to cell `$procmux$110_CMP2'.
    Redirecting output \Y: $procmux$123_CMP [2] = $procmux$110_CMP [2]
    Removing $eq cell `$procmux$123_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$123_CMP3' is identical to cell `$procmux$110_CMP3'.
    Redirecting output \Y: $procmux$123_CMP [3] = $procmux$110_CMP [3]
    Removing $eq cell `$procmux$123_CMP3' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$125_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$125_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$125_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$135_CMP0' is identical to cell `$procmux$122_CMP0'.
    Redirecting output \Y: $procmux$135_CMP [0] = $procmux$122_CMP [0]
    Removing $eq cell `$procmux$135_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$135_CMP1' is identical to cell `$procmux$122_CMP1'.
    Redirecting output \Y: $procmux$135_CMP [1] = $procmux$122_CMP [1]
    Removing $eq cell `$procmux$135_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$135_CMP2' is identical to cell `$procmux$122_CMP2'.
    Redirecting output \Y: $procmux$135_CMP [2] = $procmux$122_CMP [2]
    Removing $eq cell `$procmux$135_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$135_CMP3' is identical to cell `$procmux$122_CMP3'.
    Redirecting output \Y: $procmux$135_CMP [3] = $procmux$122_CMP [3]
    Removing $eq cell `$procmux$135_CMP3' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$136_CMP0' is identical to cell `$procmux$110_CMP0'.
    Redirecting output \Y: $procmux$136_CMP [0] = $procmux$110_CMP [0]
    Removing $logic_not cell `$procmux$136_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$136_CMP1' is identical to cell `$procmux$110_CMP1'.
    Redirecting output \Y: $procmux$136_CMP [1] = $procmux$110_CMP [1]
    Removing $eq cell `$procmux$136_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$136_CMP2' is identical to cell `$procmux$110_CMP2'.
    Redirecting output \Y: $procmux$136_CMP [2] = $procmux$110_CMP [2]
    Removing $eq cell `$procmux$136_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$136_CMP3' is identical to cell `$procmux$110_CMP3'.
    Redirecting output \Y: $procmux$136_CMP [3] = $procmux$110_CMP [3]
    Removing $eq cell `$procmux$136_CMP3' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$138_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$138_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$138_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$148_CMP0' is identical to cell `$procmux$122_CMP0'.
    Redirecting output \Y: $procmux$148_CMP [0] = $procmux$122_CMP [0]
    Removing $eq cell `$procmux$148_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$148_CMP1' is identical to cell `$procmux$122_CMP1'.
    Redirecting output \Y: $procmux$148_CMP [1] = $procmux$122_CMP [1]
    Removing $eq cell `$procmux$148_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$148_CMP2' is identical to cell `$procmux$122_CMP2'.
    Redirecting output \Y: $procmux$148_CMP [2] = $procmux$122_CMP [2]
    Removing $eq cell `$procmux$148_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$148_CMP3' is identical to cell `$procmux$122_CMP3'.
    Redirecting output \Y: $procmux$148_CMP [3] = $procmux$122_CMP [3]
    Removing $eq cell `$procmux$148_CMP3' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$149_CMP0' is identical to cell `$procmux$110_CMP0'.
    Redirecting output \Y: $procmux$149_CMP [0] = $procmux$110_CMP [0]
    Removing $logic_not cell `$procmux$149_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$149_CMP1' is identical to cell `$procmux$110_CMP1'.
    Redirecting output \Y: $procmux$149_CMP [1] = $procmux$110_CMP [1]
    Removing $eq cell `$procmux$149_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$149_CMP2' is identical to cell `$procmux$110_CMP2'.
    Redirecting output \Y: $procmux$149_CMP [2] = $procmux$110_CMP [2]
    Removing $eq cell `$procmux$149_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$149_CMP3' is identical to cell `$procmux$110_CMP3'.
    Redirecting output \Y: $procmux$149_CMP [3] = $procmux$110_CMP [3]
    Removing $eq cell `$procmux$149_CMP3' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$151_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$151_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$151_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$178_CMP0' is identical to cell `$procmux$162_CMP0'.
    Redirecting output \Y: $procmux$178_CMP [0] = $procmux$162_CMP [0]
    Removing $eq cell `$procmux$178_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$178_CMP1' is identical to cell `$procmux$162_CMP1'.
    Redirecting output \Y: $procmux$178_CMP [1] = $procmux$162_CMP [1]
    Removing $eq cell `$procmux$178_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$179_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$179_CMP [0] = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$179_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$179_CMP1' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$179_CMP [1] = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$179_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$179_CMP2' is identical to cell `$procmux$163_CMP2'.
    Redirecting output \Y: $procmux$179_CMP [2] = $procmux$163_CMP [2]
    Removing $eq cell `$procmux$179_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$17_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$17_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$17_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$183_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$183_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$183_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$18_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$18_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$18_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$195_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$195_CMP [0] = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$195_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$195_CMP1' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$195_CMP [1] = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$195_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$195_CMP2' is identical to cell `$procmux$163_CMP2'.
    Redirecting output \Y: $procmux$195_CMP [2] = $procmux$163_CMP [2]
    Removing $eq cell `$procmux$195_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$199_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$199_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$199_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$211_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$211_CMP [0] = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$211_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$211_CMP1' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$211_CMP [1] = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$211_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$211_CMP2' is identical to cell `$procmux$163_CMP2'.
    Redirecting output \Y: $procmux$211_CMP [2] = $procmux$163_CMP [2]
    Removing $eq cell `$procmux$211_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$215_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$215_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$215_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$227_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$227_CMP [0] = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$227_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$227_CMP1' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$227_CMP [1] = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$227_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$227_CMP2' is identical to cell `$procmux$163_CMP2'.
    Redirecting output \Y: $procmux$227_CMP [2] = $procmux$163_CMP [2]
    Removing $eq cell `$procmux$227_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$231_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$231_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$231_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$243_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$243_CMP [0] = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$243_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$243_CMP1' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$243_CMP [1] = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$243_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$243_CMP2' is identical to cell `$procmux$163_CMP2'.
    Redirecting output \Y: $procmux$243_CMP [2] = $procmux$163_CMP [2]
    Removing $eq cell `$procmux$243_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$247_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$247_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$247_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$259_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$259_CMP [0] = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$259_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$259_CMP1' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$259_CMP [1] = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$259_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$259_CMP2' is identical to cell `$procmux$163_CMP2'.
    Redirecting output \Y: $procmux$259_CMP [2] = $procmux$163_CMP [2]
    Removing $eq cell `$procmux$259_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$263_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$263_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$263_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$274_CMP0' is identical to cell `$procmux$162_CMP0'.
    Redirecting output \Y: $procmux$274_CMP [0] = $procmux$162_CMP [0]
    Removing $eq cell `$procmux$274_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$274_CMP1' is identical to cell `$procmux$162_CMP1'.
    Redirecting output \Y: $procmux$274_CMP [1] = $procmux$162_CMP [1]
    Removing $eq cell `$procmux$274_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$278_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$278_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$278_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$293_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$293_CMP = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$293_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$297_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$297_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$297_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$30_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$30_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$30_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$317_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$317_CMP = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$317_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$321_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$321_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$321_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$335_CMP0' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$335_CMP = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$335_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$339_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$339_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$339_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$352_CMP0' is identical to cell `$procmux$163_CMP2'.
    Redirecting output \Y: $procmux$352_CMP = $procmux$163_CMP [2]
    Removing $eq cell `$procmux$352_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$353_CMP0' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$353_CMP = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$353_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$354_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$354_CMP = $procmux$163_CMP [0]
    Removing $logic_not cell `$procmux$354_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$358_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$358_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$358_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$370_CMP0' is identical to cell `$procmux$351_CMP0'.
    Redirecting output \Y: $procmux$370_CMP = $procmux$351_CMP
    Removing $eq cell `$procmux$370_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$371_CMP0' is identical to cell `$procmux$163_CMP2'.
    Redirecting output \Y: $procmux$371_CMP = $procmux$163_CMP [2]
    Removing $eq cell `$procmux$371_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$375_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$375_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$375_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$390_CMP0' is identical to cell `$procmux$315_CMP0'.
    Redirecting output \Y: $procmux$390_CMP = $procmux$315_CMP
    Removing $eq cell `$procmux$390_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$393_CMP0' is identical to cell `$procmux$163_CMP1'.
    Redirecting output \Y: $procmux$393_CMP = $procmux$163_CMP [1]
    Removing $eq cell `$procmux$393_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$397_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$397_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$397_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$410_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$410_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$410_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$421_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$421_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$421_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$423_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$423_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$423_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$434_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$434_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$434_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$436_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$436_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$436_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$447_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$447_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$447_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$449_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$449_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$449_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$460_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$460_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$460_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$462_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$462_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$462_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$46_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$46_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$46_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$473_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$473_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$473_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$475_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$475_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$475_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$486_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$486_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$486_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$488_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$488_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$488_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$499_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$499_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$499_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$501_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$501_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$501_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$512_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$512_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$512_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$514_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$514_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$514_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$525_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$525_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$525_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$527_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$527_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$527_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$538_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$538_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$538_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$540_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$540_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$540_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$551_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$551_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$551_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$553_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$553_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$553_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$55_CMP0' is identical to cell `$procmux$39_CMP0'.
    Redirecting output \Y: $procmux$55_CMP = $procmux$39_CMP
    Removing $eq cell `$procmux$55_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$564_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$564_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$564_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$566_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$566_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$566_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$56_CMP0' is identical to cell `$procmux$40_CMP0'.
    Redirecting output \Y: $procmux$56_CMP = $procmux$40_CMP
    Removing $eq cell `$procmux$56_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$577_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$577_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$577_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$579_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$579_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$579_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$57_CMP0' is identical to cell `$procmux$41_CMP0'.
    Redirecting output \Y: $procmux$57_CMP = $procmux$41_CMP
    Removing $eq cell `$procmux$57_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$58_CMP0' is identical to cell `$procmux$42_CMP0'.
    Redirecting output \Y: $procmux$58_CMP = $procmux$42_CMP
    Removing $eq cell `$procmux$58_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$590_CMP0' is identical to cell `$procmux$408_CMP0'.
    Redirecting output \Y: $procmux$590_CMP = $procmux$408_CMP
    Removing $not cell `$procmux$590_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$592_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$592_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$592_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$599_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$599_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$599_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$59_CMP0' is identical to cell `$procmux$43_CMP0'.
    Redirecting output \Y: $procmux$59_CMP = $procmux$43_CMP
    Removing $eq cell `$procmux$59_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$600_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$600_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$600_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$601_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$601_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$601_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$602_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$602_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$602_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$60_CMP0' is identical to cell `$procmux$44_CMP0'.
    Redirecting output \Y: $procmux$60_CMP = $procmux$44_CMP
    Removing $logic_not cell `$procmux$60_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$612_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$612_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$612_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$619_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$619_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$619_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$620_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$620_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$620_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$621_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$621_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$621_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$622_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$622_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$622_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$629_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$629_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$629_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$62_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$62_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$62_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$630_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$630_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$630_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$631_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$631_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$631_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$632_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$632_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$632_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$639_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$639_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$639_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$640_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$640_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$640_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$641_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$641_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$641_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$642_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$642_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$642_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$649_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$649_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$649_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$650_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$650_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$650_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$651_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$651_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$651_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$652_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$652_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$652_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$659_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$659_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$659_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$660_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$660_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$660_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$661_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$661_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$661_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$662_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$662_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$662_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$669_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$669_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$669_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$670_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$670_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$670_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$671_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$671_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$671_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$672_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$672_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$672_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$679_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$679_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$679_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$680_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$680_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$680_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$681_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$681_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$681_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$682_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$682_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$682_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$689_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$689_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$689_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$690_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$690_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$690_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$691_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$691_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$691_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$692_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$692_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$692_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$699_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$699_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$699_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$700_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$700_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$700_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$701_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$701_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$701_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$702_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$702_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$702_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$710_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$710_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$710_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$711_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$711_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$711_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$712_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$712_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$712_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$71_CMP0' is identical to cell `$procmux$39_CMP0'.
    Redirecting output \Y: $procmux$71_CMP = $procmux$39_CMP
    Removing $eq cell `$procmux$71_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$720_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$720_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$720_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$721_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$721_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$721_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$722_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$722_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$722_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$72_CMP0' is identical to cell `$procmux$40_CMP0'.
    Redirecting output \Y: $procmux$72_CMP = $procmux$40_CMP
    Removing $eq cell `$procmux$72_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$732_CMP0' is identical to cell `$procmux$167_CMP0'.
    Redirecting output \Y: $procmux$732_CMP = $procmux$167_CMP
    Removing $logic_not cell `$procmux$732_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$739_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$739_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$739_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$73_CMP0' is identical to cell `$procmux$41_CMP0'.
    Redirecting output \Y: $procmux$73_CMP = $procmux$41_CMP
    Removing $eq cell `$procmux$73_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$740_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$740_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$740_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$747_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$747_CMP = $procmux$15_CMP
    Removing $eq cell `$procmux$747_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$748_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$748_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$748_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$74_CMP0' is identical to cell `$procmux$42_CMP0'.
    Redirecting output \Y: $procmux$74_CMP = $procmux$42_CMP
    Removing $eq cell `$procmux$74_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$756_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$756_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$756_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$759_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$759_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$759_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$75_CMP0' is identical to cell `$procmux$43_CMP0'.
    Redirecting output \Y: $procmux$75_CMP = $procmux$43_CMP
    Removing $eq cell `$procmux$75_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$762_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$762_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$762_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$765_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$765_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$765_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$768_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$768_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$768_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$771_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$771_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$771_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$774_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$774_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$774_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$777_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$777_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$777_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$77_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$77_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$77_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$780_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$780_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$780_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$783_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$783_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$783_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$786_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$786_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$786_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$789_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$789_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$789_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$792_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$792_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$792_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$795_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$795_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$795_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$798_CMP0' is identical to cell `$procmux$753_CMP0'.
    Redirecting output \Y: $procmux$798_CMP = $procmux$753_CMP
    Removing $not cell `$procmux$798_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$87_CMP0' is identical to cell `$procmux$105_CMP0'.
    Redirecting output \Y: $procmux$87_CMP = $procmux$105_CMP
    Removing $eq cell `$procmux$87_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$88_CMP0' is identical to cell `$procmux$106_CMP0'.
    Redirecting output \Y: $procmux$88_CMP = $procmux$106_CMP
    Removing $eq cell `$procmux$88_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$89_CMP0' is identical to cell `$procmux$107_CMP0'.
    Redirecting output \Y: $procmux$89_CMP = $procmux$107_CMP
    Removing $eq cell `$procmux$89_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$90_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$90_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$90_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$92_CMP0' is identical to cell `$procmux$122_CMP0'.
    Redirecting output \Y: $procmux$92_CMP [0] = $procmux$122_CMP [0]
    Removing $eq cell `$procmux$92_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$92_CMP1' is identical to cell `$procmux$122_CMP1'.
    Redirecting output \Y: $procmux$92_CMP [1] = $procmux$122_CMP [1]
    Removing $eq cell `$procmux$92_CMP1' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$92_CMP2' is identical to cell `$procmux$122_CMP2'.
    Redirecting output \Y: $procmux$92_CMP [2] = $procmux$122_CMP [2]
    Removing $eq cell `$procmux$92_CMP2' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$92_CMP3' is identical to cell `$procmux$122_CMP3'.
    Redirecting output \Y: $procmux$92_CMP [3] = $procmux$122_CMP [3]
    Removing $eq cell `$procmux$92_CMP3' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$94_CMP0' is identical to cell `$procmux$112_CMP0'.
    Redirecting output \Y: $procmux$94_CMP = $procmux$112_CMP
    Removing $eq cell `$procmux$94_CMP0' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$149_ANY' is identical to cell `$procmux$136_ANY'.
    Redirecting output \Y: $procmux$149_CTRL = $procmux$136_CTRL
    Removing $reduce_or cell `$procmux$149_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$178_ANY' is identical to cell `$procmux$162_ANY'.
    Redirecting output \Y: $procmux$178_CTRL = $procmux$162_CTRL
    Removing $reduce_or cell `$procmux$178_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$179_ANY' is identical to cell `$procmux$163_ANY'.
    Redirecting output \Y: $procmux$179_CTRL = $procmux$163_CTRL
    Removing $reduce_or cell `$procmux$179_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$110_ANY' is identical to cell `$procmux$136_ANY'.
    Redirecting output \Y: $procmux$110_CTRL = $procmux$136_CTRL
    Removing $reduce_or cell `$procmux$110_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$195_ANY' is identical to cell `$procmux$163_ANY'.
    Redirecting output \Y: $procmux$195_CTRL = $procmux$163_CTRL
    Removing $reduce_or cell `$procmux$195_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$211_ANY' is identical to cell `$procmux$163_ANY'.
    Redirecting output \Y: $procmux$211_CTRL = $procmux$163_CTRL
    Removing $reduce_or cell `$procmux$211_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$227_ANY' is identical to cell `$procmux$163_ANY'.
    Redirecting output \Y: $procmux$227_CTRL = $procmux$163_CTRL
    Removing $reduce_or cell `$procmux$227_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$122_ANY' is identical to cell `$procmux$148_ANY'.
    Redirecting output \Y: $procmux$122_CTRL = $procmux$148_CTRL
    Removing $reduce_or cell `$procmux$122_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$243_ANY' is identical to cell `$procmux$163_ANY'.
    Redirecting output \Y: $procmux$243_CTRL = $procmux$163_CTRL
    Removing $reduce_or cell `$procmux$243_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$123_ANY' is identical to cell `$procmux$136_ANY'.
    Redirecting output \Y: $procmux$123_CTRL = $procmux$136_CTRL
    Removing $reduce_or cell `$procmux$123_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$259_ANY' is identical to cell `$procmux$163_ANY'.
    Redirecting output \Y: $procmux$259_CTRL = $procmux$163_CTRL
    Removing $reduce_or cell `$procmux$259_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$274_ANY' is identical to cell `$procmux$162_ANY'.
    Redirecting output \Y: $procmux$274_CTRL = $procmux$162_CTRL
    Removing $reduce_or cell `$procmux$274_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$135_ANY' is identical to cell `$procmux$148_ANY'.
    Redirecting output \Y: $procmux$135_CTRL = $procmux$148_CTRL
    Removing $reduce_or cell `$procmux$135_ANY' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$92_ANY' is identical to cell `$procmux$148_ANY'.
    Redirecting output \Y: $procmux$92_CTRL = $procmux$148_CTRL
    Removing $reduce_or cell `$procmux$92_ANY' from module `\NRISC_InstructionDecoder'.
Removed a total of 204 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_InstructionDecoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$751 (pure)
    Root of a mux tree: $procmux$754 (pure)
    Root of a mux tree: $procmux$757 (pure)
    Root of a mux tree: $procmux$760 (pure)
    Root of a mux tree: $procmux$763 (pure)
    Root of a mux tree: $procmux$766 (pure)
    Root of a mux tree: $procmux$769 (pure)
    Root of a mux tree: $procmux$772 (pure)
    Root of a mux tree: $procmux$775 (pure)
    Root of a mux tree: $procmux$778 (pure)
    Root of a mux tree: $procmux$781 (pure)
    Root of a mux tree: $procmux$784 (pure)
    Root of a mux tree: $procmux$787 (pure)
    Root of a mux tree: $procmux$790 (pure)
    Root of a mux tree: $procmux$793 (pure)
    Root of a mux tree: $procmux$796 (pure)
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$137.
    dead port 1/2 on $mux $procmux$372.
    dead port 2/2 on $mux $procmux$374.
    dead port 1/2 on $mux $procmux$139.
    dead port 1/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$392.
    dead port 1/2 on $mux $procmux$394.
    dead port 2/2 on $mux $procmux$396.
    dead port 1/2 on $mux $procmux$398.
    dead port 2/2 on $mux $procmux$409.
    dead port 1/2 on $mux $procmux$411.
    dead port 2/2 on $mux $procmux$422.
    dead port 1/2 on $mux $procmux$424.
    dead port 2/2 on $mux $procmux$435.
    dead port 1/2 on $mux $procmux$437.
    dead port 2/2 on $mux $procmux$448.
    dead port 2/2 on $mux $procmux$45.
    dead port 1/2 on $mux $procmux$450.
    dead port 2/2 on $mux $procmux$461.
    dead port 1/2 on $mux $procmux$463.
    dead port 1/2 on $mux $procmux$47.
    dead port 2/2 on $mux $procmux$150.
    dead port 2/2 on $mux $procmux$474.
    dead port 1/2 on $mux $procmux$476.
    dead port 1/2 on $mux $procmux$152.
    dead port 2/2 on $mux $procmux$487.
    dead port 1/2 on $mux $procmux$489.
    dead port 2/2 on $mux $procmux$500.
    dead port 1/2 on $mux $procmux$502.
    dead port 2/2 on $mux $procmux$513.
    dead port 1/2 on $mux $procmux$515.
    dead port 2/2 on $mux $procmux$526.
    dead port 1/2 on $mux $procmux$528.
    dead port 2/2 on $mux $procmux$539.
    dead port 1/2 on $mux $procmux$541.
    dead port 2/2 on $mux $procmux$164.
    dead port 2/2 on $mux $procmux$552.
    dead port 2/2 on $mux $procmux$166.
    dead port 1/2 on $mux $procmux$554.
    dead port 1/2 on $mux $procmux$168.
    dead port 2/2 on $mux $procmux$565.
    dead port 1/2 on $mux $procmux$567.
    dead port 1/2 on $mux $procmux$336.
    dead port 2/2 on $mux $procmux$578.
    dead port 1/2 on $mux $procmux$580.
    dead port 2/2 on $mux $procmux$338.
    dead port 2/2 on $mux $procmux$591.
    dead port 1/2 on $mux $procmux$593.
    dead port 2/2 on $mux $procmux$180.
    dead port 2/2 on $mux $procmux$182.
    dead port 2/2 on $mux $procmux$109.
    dead port 1/2 on $mux $procmux$603.
    dead port 1/2 on $mux $procmux$184.
    dead port 2/2 on $mux $procmux$61.
    dead port 1/2 on $mux $procmux$613.
    dead port 2/2 on $mux $procmux$19.
    dead port 1/2 on $mux $procmux$340.
    dead port 1/2 on $mux $procmux$623.
    dead port 1/2 on $mux $procmux$63.
    dead port 2/2 on $mux $procmux$196.
    dead port 2/2 on $mux $procmux$198.
    dead port 1/2 on $mux $procmux$633.
    dead port 1/2 on $mux $procmux$200.
    dead port 2/2 on $mux $procmux$111.
    dead port 1/2 on $mux $procmux$643.
    dead port 1/2 on $mux $procmux$113.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$214.
    dead port 1/2 on $mux $procmux$653.
    dead port 1/2 on $mux $procmux$216.
    dead port 1/2 on $mux $procmux$663.
    dead port 2/2 on $mux $procmux$228.
    dead port 1/2 on $mux $procmux$673.
    dead port 2/2 on $mux $procmux$230.
    dead port 1/2 on $mux $procmux$232.
    dead port 1/2 on $mux $procmux$683.
    dead port 1/2 on $mux $procmux$693.
    dead port 2/2 on $mux $procmux$244.
    dead port 2/2 on $mux $procmux$246.
    dead port 1/2 on $mux $procmux$248.
    dead port 1/2 on $mux $procmux$703.
    dead port 1/2 on $mux $procmux$355.
    dead port 1/2 on $mux $procmux$713.
    dead port 2/2 on $mux $procmux$260.
    dead port 1/2 on $mux $procmux$723.
    dead port 2/2 on $mux $procmux$262.
    dead port 2/2 on $mux $procmux$124.
    dead port 1/2 on $mux $procmux$733.
    dead port 1/2 on $mux $procmux$264.
    dead port 1/2 on $mux $procmux$741.
    dead port 2/2 on $mux $procmux$357.
    dead port 1/2 on $mux $procmux$749.
    dead port 1/2 on $mux $procmux$126.
    dead port 2/2 on $mux $procmux$275.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$76.
    dead port 1/2 on $mux $procmux$279.
    dead port 2/2 on $mux $procmux$29.
    dead port 1/2 on $mux $procmux$294.
    dead port 1/2 on $mux $procmux$78.
    dead port 2/2 on $mux $procmux$296.
    dead port 1/2 on $mux $procmux$298.
    dead port 1/2 on $mux $procmux$31.
    dead port 2/2 on $mux $procmux$316.
    dead port 2/2 on $mux $procmux$91.
    dead port 1/2 on $mux $procmux$359.
    dead port 1/2 on $mux $procmux$318.
    dead port 2/2 on $mux $procmux$320.
    dead port 1/2 on $mux $procmux$322.
    dead port 2/2 on $mux $procmux$93.
    dead port 1/2 on $mux $procmux$95.
Removed 111 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_InstructionDecoder.
    New input vector for $reduce_or cell $procmux$148_ANY: { $procmux$122_CMP [0] $procmux$122_CMP [1] $procmux$122_CMP [2] $procmux$122_CMP [3] }
    New input vector for $reduce_or cell $procmux$163_ANY: { $procmux$163_CMP [0] $procmux$163_CMP [1] $procmux$163_CMP [2] }
    New input vector for $reduce_or cell $procmux$162_ANY: { $procmux$162_CMP [0] $procmux$162_CMP [1] }
    New input vector for $reduce_or cell $procmux$136_ANY: { $procmux$110_CMP [0] $procmux$110_CMP [1] $procmux$110_CMP [2] $procmux$110_CMP [3] }
    New ctrl vector for $pmux cell $procmux$471: $auto$opt_reduce.cc:132:opt_mux$816
    New ctrl vector for $pmux cell $procmux$618: { $procmux$167_CMP $procmux$112_CMP $auto$opt_reduce.cc:132:opt_mux$818 }
    New ctrl vector for $pmux cell $procmux$628: { $procmux$167_CMP $auto$opt_reduce.cc:132:opt_mux$820 }
    New ctrl vector for $pmux cell $procmux$638: { $procmux$167_CMP $procmux$16_CMP $auto$opt_reduce.cc:132:opt_mux$822 }
    New ctrl vector for $pmux cell $procmux$350: { $auto$opt_reduce.cc:132:opt_mux$824 $procmux$163_CMP [2] $procmux$351_CMP }
    New ctrl vector for $pmux cell $procmux$369: $auto$opt_reduce.cc:132:opt_mux$826
    New ctrl vector for $pmux cell $procmux$648: { $procmux$167_CMP $auto$opt_reduce.cc:132:opt_mux$828 $procmux$15_CMP }
    New ctrl vector for $pmux cell $procmux$658: { $procmux$167_CMP $procmux$16_CMP $auto$opt_reduce.cc:132:opt_mux$830 }
    New ctrl vector for $pmux cell $procmux$668: { $procmux$167_CMP $auto$opt_reduce.cc:132:opt_mux$832 $procmux$15_CMP }
    New ctrl vector for $pmux cell $procmux$678: { $procmux$167_CMP $procmux$16_CMP $auto$opt_reduce.cc:132:opt_mux$834 }
    New ctrl vector for $pmux cell $procmux$432: $auto$opt_reduce.cc:132:opt_mux$836
    New ctrl vector for $pmux cell $procmux$688: { $procmux$167_CMP $procmux$16_CMP $auto$opt_reduce.cc:132:opt_mux$838 }
    New ctrl vector for $pmux cell $procmux$698: { $procmux$167_CMP $procmux$112_CMP $auto$opt_reduce.cc:132:opt_mux$840 }
    New ctrl vector for $pmux cell $procmux$54: { $procmux$44_CMP $auto$opt_reduce.cc:132:opt_mux$842 }
    New ctrl vector for $pmux cell $procmux$709: { $procmux$167_CMP $auto$opt_reduce.cc:132:opt_mux$844 }
    New ctrl vector for $pmux cell $procmux$38: { $procmux$44_CMP $auto$opt_reduce.cc:132:opt_mux$846 }
    New ctrl vector for $pmux cell $procmux$445: $auto$opt_reduce.cc:132:opt_mux$848
    New ctrl vector for $pmux cell $procmux$746: $auto$opt_reduce.cc:132:opt_mux$850
    New ctrl vector for $pmux cell $procmux$134: $auto$opt_reduce.cc:132:opt_mux$852
    New ctrl vector for $pmux cell $procmux$458: $auto$opt_reduce.cc:132:opt_mux$854
    New ctrl vector for $pmux cell $procmux$598: { $procmux$167_CMP $auto$opt_reduce.cc:132:opt_mux$856 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$815: { \CORE_InstructionIN [11] $procmux$408_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$817: { $procmux$15_CMP $procmux$16_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$819: { $procmux$15_CMP $procmux$16_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$821: { $procmux$15_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$827: { $procmux$16_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$829: { $procmux$15_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$831: { $procmux$16_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$833: { $procmux$15_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$835: { \CORE_InstructionIN [11] $procmux$408_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$837: { $procmux$15_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$839: { $procmux$15_CMP $procmux$16_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$841: { $procmux$39_CMP $procmux$40_CMP $procmux$41_CMP $procmux$42_CMP $procmux$43_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$843: { $procmux$16_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$845: { $procmux$39_CMP $procmux$40_CMP $procmux$41_CMP $procmux$42_CMP $procmux$43_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$847: { \CORE_InstructionIN [11] $procmux$408_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$849: { $procmux$15_CMP $procmux$16_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$851: { $procmux$110_CMP [0] $procmux$110_CMP [1] $procmux$110_CMP [2] $procmux$110_CMP [3] $procmux$122_CMP [0] $procmux$122_CMP [1] $procmux$122_CMP [2] $procmux$122_CMP [3] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$853: { \CORE_InstructionIN [11] $procmux$408_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$855: { $procmux$15_CMP $procmux$16_CMP $procmux$112_CMP }
  Optimizing cells in module \NRISC_InstructionDecoder.
Performed a total of 44 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$847' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$853'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$848 = $auto$opt_reduce.cc:132:opt_mux$854
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$847' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$841' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$845'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$842 = $auto$opt_reduce.cc:132:opt_mux$846
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$841' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$839' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$849'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$840 = $auto$opt_reduce.cc:132:opt_mux$850
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$839' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$835' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$853'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$836 = $auto$opt_reduce.cc:132:opt_mux$854
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$835' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$833' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$837'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$834 = $auto$opt_reduce.cc:132:opt_mux$838
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$833' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$831' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$843'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$832 = $auto$opt_reduce.cc:132:opt_mux$844
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$831' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$829' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$837'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$830 = $auto$opt_reduce.cc:132:opt_mux$838
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$829' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$827' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$843'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$828 = $auto$opt_reduce.cc:132:opt_mux$844
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$827' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$821' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$837'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$822 = $auto$opt_reduce.cc:132:opt_mux$838
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$821' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$819' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$855'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$820 = $auto$opt_reduce.cc:132:opt_mux$856
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$819' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$817' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$849'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$818 = $auto$opt_reduce.cc:132:opt_mux$850
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$817' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$815' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$853'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$816 = $auto$opt_reduce.cc:132:opt_mux$854
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$815' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$432' is identical to cell `$procmux$471'.
    Redirecting output \Y: $procmux$432_Y = $procmux$471_Y
    Removing $mux cell `$procmux$432' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$445' is identical to cell `$procmux$471'.
    Redirecting output \Y: $procmux$445_Y = $procmux$471_Y
    Removing $mux cell `$procmux$445' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$458' is identical to cell `$procmux$471'.
    Redirecting output \Y: $procmux$458_Y = $procmux$471_Y
    Removing $mux cell `$procmux$458' from module `\NRISC_InstructionDecoder'.
  Cell `$procmux$86' is identical to cell `$procmux$104'.
    Redirecting output \Y: $procmux$86_Y = $procmux$104_Y
    Removing $pmux cell `$procmux$86' from module `\NRISC_InstructionDecoder'.
Removed a total of 16 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Replacing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$853' (const_or) in module `\NRISC_InstructionDecoder' with constant driver `$auto$opt_reduce.cc:132:opt_mux$816 = 1'1'.
Replacing $mux cell `$procmux$471' (1) in module `\NRISC_InstructionDecoder' with constant driver `$3\CORE_DATA_ADDR_mux[0:0] = 1'0'.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_InstructionDecoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$751 (pure)
    Root of a mux tree: $procmux$754 (pure)
    Root of a mux tree: $procmux$757 (pure)
    Root of a mux tree: $procmux$760 (pure)
    Root of a mux tree: $procmux$763 (pure)
    Root of a mux tree: $procmux$766 (pure)
    Root of a mux tree: $procmux$769 (pure)
    Root of a mux tree: $procmux$772 (pure)
    Root of a mux tree: $procmux$775 (pure)
    Root of a mux tree: $procmux$778 (pure)
    Root of a mux tree: $procmux$781 (pure)
    Root of a mux tree: $procmux$784 (pure)
    Root of a mux tree: $procmux$787 (pure)
    Root of a mux tree: $procmux$790 (pure)
    Root of a mux tree: $procmux$793 (pure)
    Root of a mux tree: $procmux$796 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_InstructionDecoder.
    New ctrl vector for $pmux cell $procmux$121: $auto$opt_reduce.cc:132:opt_mux$858
    New ctrl vector for $pmux cell $procmux$638: { $procmux$16_CMP $auto$opt_reduce.cc:132:opt_mux$860 }
    New ctrl vector for $pmux cell $procmux$648: { $auto$opt_reduce.cc:132:opt_mux$862 $procmux$15_CMP }
    New ctrl vector for $pmux cell $procmux$658: { $procmux$16_CMP $auto$opt_reduce.cc:132:opt_mux$864 }
    New ctrl vector for $pmux cell $procmux$668: { $auto$opt_reduce.cc:132:opt_mux$866 $procmux$15_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$857: { $procmux$110_CMP [0] $procmux$110_CMP [1] $procmux$110_CMP [2] $procmux$110_CMP [3] $procmux$122_CMP [0] $procmux$122_CMP [1] $procmux$122_CMP [2] $procmux$122_CMP [3] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$859: { $procmux$15_CMP $procmux$112_CMP $procmux$167_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$861: { $procmux$167_CMP $procmux$16_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$863: { $procmux$15_CMP $procmux$112_CMP $procmux$167_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$865: { $procmux$167_CMP $procmux$16_CMP $procmux$112_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$861: { $procmux$16_CMP $procmux$112_CMP $procmux$167_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$865: { $procmux$16_CMP $procmux$112_CMP $procmux$167_CMP }
  Optimizing cells in module \NRISC_InstructionDecoder.
Performed a total of 12 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$861' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$865'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$862 = $auto$opt_reduce.cc:132:opt_mux$866
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$861' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$859' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$863'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$860 = $auto$opt_reduce.cc:132:opt_mux$864
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$859' from module `\NRISC_InstructionDecoder'.
Removed a total of 2 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_InstructionDecoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$751 (pure)
    Root of a mux tree: $procmux$754 (pure)
    Root of a mux tree: $procmux$757 (pure)
    Root of a mux tree: $procmux$760 (pure)
    Root of a mux tree: $procmux$763 (pure)
    Root of a mux tree: $procmux$766 (pure)
    Root of a mux tree: $procmux$769 (pure)
    Root of a mux tree: $procmux$772 (pure)
    Root of a mux tree: $procmux$775 (pure)
    Root of a mux tree: $procmux$778 (pure)
    Root of a mux tree: $procmux$781 (pure)
    Root of a mux tree: $procmux$784 (pure)
    Root of a mux tree: $procmux$787 (pure)
    Root of a mux tree: $procmux$790 (pure)
    Root of a mux tree: $procmux$793 (pure)
    Root of a mux tree: $procmux$796 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_InstructionDecoder.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$857' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$851'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$858 = $auto$opt_reduce.cc:132:opt_mux$852
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$857' from module `\NRISC_InstructionDecoder'.
Removed a total of 1 cells.

3.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.6.22. Executing OPT_EXPR pass (perform const folding).

3.6.23. Rerunning OPT passes. (Maybe there is more to do..)

3.6.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_InstructionDecoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$751 (pure)
    Root of a mux tree: $procmux$754 (pure)
    Root of a mux tree: $procmux$757 (pure)
    Root of a mux tree: $procmux$760 (pure)
    Root of a mux tree: $procmux$763 (pure)
    Root of a mux tree: $procmux$766 (pure)
    Root of a mux tree: $procmux$769 (pure)
    Root of a mux tree: $procmux$772 (pure)
    Root of a mux tree: $procmux$775 (pure)
    Root of a mux tree: $procmux$778 (pure)
    Root of a mux tree: $procmux$781 (pure)
    Root of a mux tree: $procmux$784 (pure)
    Root of a mux tree: $procmux$787 (pure)
    Root of a mux tree: $procmux$790 (pure)
    Root of a mux tree: $procmux$793 (pure)
    Root of a mux tree: $procmux$796 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_InstructionDecoder.
Performed a total of 0 changes.

3.6.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

3.6.27. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.6.29. Executing OPT_EXPR pass (perform const folding).

3.6.30. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell NRISC_InstructionDecoder.$procmux$15_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell NRISC_InstructionDecoder.$procmux$16_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell NRISC_InstructionDecoder.$procmux$27_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$39_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$40_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$41_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$42_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$43_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell NRISC_InstructionDecoder.$procmux$104 ($pmux).
Removed top 1 bits (of 2) from port B of cell NRISC_InstructionDecoder.$procmux$107_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$110_CMP1 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$110_CMP2 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$110_CMP3 ($eq).
Removed top 2 bits (of 3) from port B of cell NRISC_InstructionDecoder.$procmux$112_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$122_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$122_CMP1 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$122_CMP2 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_InstructionDecoder.$procmux$122_CMP3 ($eq).
Removed top 2 bits (of 3) from port B of cell NRISC_InstructionDecoder.$procmux$163_CMP1 ($eq).
Removed top 1 bits (of 3) from port B of cell NRISC_InstructionDecoder.$procmux$163_CMP2 ($eq).
Removed top 6 bits (of 8) from port B of cell NRISC_InstructionDecoder.$procmux$313_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell NRISC_InstructionDecoder.$procmux$314_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell NRISC_InstructionDecoder.$procmux$315_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell NRISC_InstructionDecoder.$procmux$351_CMP0 ($eq).
Removed top 1 bits (of 2) from wire NRISC_InstructionDecoder.$6\CORE_PC_ctrl[1:0].

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module NRISC_InstructionDecoder:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_InstructionDecoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$751 (pure)
    Root of a mux tree: $procmux$754 (pure)
    Root of a mux tree: $procmux$757 (pure)
    Root of a mux tree: $procmux$760 (pure)
    Root of a mux tree: $procmux$763 (pure)
    Root of a mux tree: $procmux$766 (pure)
    Root of a mux tree: $procmux$769 (pure)
    Root of a mux tree: $procmux$772 (pure)
    Root of a mux tree: $procmux$775 (pure)
    Root of a mux tree: $procmux$778 (pure)
    Root of a mux tree: $procmux$781 (pure)
    Root of a mux tree: $procmux$784 (pure)
    Root of a mux tree: $procmux$787 (pure)
    Root of a mux tree: $procmux$790 (pure)
    Root of a mux tree: $procmux$793 (pure)
    Root of a mux tree: $procmux$796 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_InstructionDecoder.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking NRISC_InstructionDecoder.CORE_INT_ctrl as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Not marking NRISC_InstructionDecoder.CORE_STACK_ctrl as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Setting undriven signal in NRISC_InstructionDecoder to undef: \CORE_Status_ctrl [4]
Setting undriven signal in NRISC_InstructionDecoder to undef: \CORE_ULAMux_inc_dec
Setting undriven signal in NRISC_InstructionDecoder to undef: \CORE_PC_clk
Optimized away 1 select inputs of $pmux cell `$procmux$10' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$104' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$406' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$419' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$484' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$497' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$510' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$523' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$536' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$549' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$562' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$575' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$588' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$751' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$754' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$757' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$760' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$763' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$766' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$769' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$772' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$775' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$778' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$781' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$784' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$787' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$790' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$793' in module `NRISC_InstructionDecoder'.
Optimized away 1 select inputs of $pmux cell `$procmux$796' in module `NRISC_InstructionDecoder'.
Replacing $mux cell `$procmux$484' in module `NRISC_InstructionDecoder' with and-gate.
Replacing $mux cell `$procmux$778' in module `NRISC_InstructionDecoder' with or-gate.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..
  removing unused `$logic_not' cell `$procmux$108_CMP0'.
  removing unused `$not' cell `$procmux$408_CMP0'.
  removing unused `$not' cell `$procmux$753_CMP0'.

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_InstructionDecoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$226 (pure)
    Root of a mux tree: $procmux$678 (pure)
    Root of a mux tree: $procmux$751 (pure)
    Root of a mux tree: $procmux$754 (pure)
    Root of a mux tree: $procmux$757 (pure)
    Root of a mux tree: $procmux$760 (pure)
    Root of a mux tree: $procmux$763 (pure)
    Root of a mux tree: $procmux$766 (pure)
    Root of a mux tree: $procmux$769 (pure)
    Root of a mux tree: $procmux$772 (pure)
    Root of a mux tree: $procmux$775 (pure)
    Root of a mux tree: $procmux$781 (pure)
    Root of a mux tree: $procmux$784 (pure)
    Root of a mux tree: $procmux$787 (pure)
    Root of a mux tree: $procmux$790 (pure)
    Root of a mux tree: $procmux$793 (pure)
    Root of a mux tree: $procmux$796 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_InstructionDecoder.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping NRISC_InstructionDecoder.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:151$2 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$not$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:164$3 ($not) with simplemap.
Mapping NRISC_InstructionDecoder.$and$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:164$4 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$eq$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:366$5 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$eq$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:367$6 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$or$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:367$7 ($or) with simplemap.
Mapping NRISC_InstructionDecoder.$not$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:367$8 ($not) with simplemap.
Mapping NRISC_InstructionDecoder.$and$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.v:367$9 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$11_CMP0 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 7
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=7'.

3.18.3. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$10 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=7.
Mapping NRISC_InstructionDecoder.$procmux$12_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$13_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$14_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$15_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$16_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$26_CMP0 ($eq) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 3
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=3\S_WIDTH=3'.

3.18.5. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$25 using $paramod\_90_pmux\WIDTH=3\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$procmux$27_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$28_CMP0 ($logic_not) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$39_CMP0 ($eq) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=2'.

3.18.7. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$38 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$40_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$41_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$42_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$43_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$44_CMP0 ($logic_not) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$54 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 3
Parameter \S_WIDTH = 5
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=3\S_WIDTH=5'.

3.18.9. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$70 using $paramod\_90_pmux\WIDTH=3\S_WIDTH=5.
Mapping NRISC_InstructionDecoder.$procmux$105_CMP0 ($eq) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=3'.

3.18.11. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$104 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$procmux$106_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$107_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$110_CMP0 ($logic_not) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$110_CMP1 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$110_CMP2 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$110_CMP3 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$112_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$122_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$122_CMP1 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$122_CMP2 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$122_CMP3 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$121 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$134 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$136_ANY ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$148_ANY ($reduce_or) with simplemap.

3.18.12. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=2'.

3.18.13. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$147 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$162_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$162_CMP1 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$162_ANY ($reduce_or) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 2
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=2\S_WIDTH=2'.

3.18.15. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$161 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$163_CMP0 ($logic_not) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$163_CMP1 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$163_CMP2 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$163_ANY ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$167_CMP0 ($logic_not) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$177 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$194 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$210 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$226 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$855 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$242 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$849 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$863 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$258 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$843 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$273 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$292 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$825 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$313_CMP0 ($eq) with simplemap.

3.18.16. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 2
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=2\S_WIDTH=3'.

3.18.17. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$312 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$procmux$314_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$315_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$823 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$334 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$351_CMP0 ($eq) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$350 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$845 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$369 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$389 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$391_CMP0 ($logic_not) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$406 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$419 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$484 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$497 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$510 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$523 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$536 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$549 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$562 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$575 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$588 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$598 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$611 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$618 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$procmux$628 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$638 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$648 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$658 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$668 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$procmux$678 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$851 ($reduce_or) with simplemap.

3.18.18. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=3'.

3.18.19. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$688 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$procmux$698 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$procmux$709 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$865 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$719 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=3.
Mapping NRISC_InstructionDecoder.$procmux$731 ($mux) with simplemap.

3.18.20. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 3
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=3\S_WIDTH=2'.

3.18.21. Continuing TECHMAP pass.
Mapping NRISC_InstructionDecoder.$procmux$738 using $paramod\_90_pmux\WIDTH=3\S_WIDTH=2.
Mapping NRISC_InstructionDecoder.$auto$opt_reduce.cc:126:opt_mux$837 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$746 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$751 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$754 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$757 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$760 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$763 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$766 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$769 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$772 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$775 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$778 ($or) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$781 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$784 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$787 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$790 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$793 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procmux$796 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$799 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$800 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$801 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$802 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$803 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$804 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$805 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$806 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$807 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$808 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$809 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$810 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$811 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$812 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$813 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$procdff$814 ($dff) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$161.$reduce_or$<techmap.v>:441$1383 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$177.$ternary$<techmap.v>:445$1380 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$177.$and$<techmap.v>:434$1381 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$177.$and$<techmap.v>:434$1382 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$177.$reduce_or$<techmap.v>:441$1384 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$177.$reduce_or$<techmap.v>:441$1383 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$38.$and$<techmap.v>:434$1090 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$25.$reduce_or$<techmap.v>:445$1052 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$25.$and$<techmap.v>:434$1054 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$38.$reduce_or$<techmap.v>:445$1088 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$38.$ternary$<techmap.v>:445$1089 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$104.$reduce_or$<techmap.v>:445$1179 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$104.$ternary$<techmap.v>:445$1180 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$104.$and$<techmap.v>:434$1181 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$38.$reduce_or$<techmap.v>:441$1092 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$104.$and$<techmap.v>:434$1182 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$104.$reduce_or$<techmap.v>:441$1184 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$104.$and$<techmap.v>:434$1183 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$38.$and$<techmap.v>:434$1091 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$147.$reduce_or$<techmap.v>:445$1343 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$147.$ternary$<techmap.v>:445$1344 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$147.$and$<techmap.v>:434$1345 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$147.$and$<techmap.v>:434$1346 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$147.$reduce_or$<techmap.v>:441$1347 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$147.$reduce_or$<techmap.v>:441$1348 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$147.$reduce_or$<techmap.v>:441$1350 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$147.$reduce_or$<techmap.v>:441$1349 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$25.$reduce_or$<techmap.v>:441$1057 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$reduce_or$<techmap.v>:445$1159 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$ternary$<techmap.v>:445$1160 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$and$<techmap.v>:434$1161 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$and$<techmap.v>:434$1162 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$and$<techmap.v>:434$1163 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$and$<techmap.v>:434$1164 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$and$<techmap.v>:434$1165 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$reduce_or$<techmap.v>:441$1166 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$reduce_or$<techmap.v>:441$1168 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$70.$reduce_or$<techmap.v>:441$1167 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$25.$ternary$<techmap.v>:445$1053 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$25.$and$<techmap.v>:434$1055 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$25.$and$<techmap.v>:434$1056 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$25.$reduce_or$<techmap.v>:441$1059 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$25.$reduce_or$<techmap.v>:441$1058 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$54.$reduce_or$<techmap.v>:445$1088 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$54.$ternary$<techmap.v>:445$1089 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$54.$and$<techmap.v>:434$1090 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$54.$reduce_or$<techmap.v>:441$1092 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$54.$and$<techmap.v>:434$1091 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$reduce_or$<techmap.v>:441$976 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$reduce_or$<techmap.v>:441$975 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$reduce_or$<techmap.v>:441$974 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$reduce_or$<techmap.v>:441$973 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$and$<techmap.v>:434$972 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$and$<techmap.v>:434$970 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$and$<techmap.v>:434$971 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$and$<techmap.v>:434$969 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$and$<techmap.v>:434$968 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$and$<techmap.v>:434$967 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$161.$reduce_or$<techmap.v>:445$1379 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$ternary$<techmap.v>:445$965 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$and$<techmap.v>:434$966 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$10.$reduce_or$<techmap.v>:445$964 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$161.$ternary$<techmap.v>:445$1380 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$161.$and$<techmap.v>:434$1381 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$161.$and$<techmap.v>:434$1382 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$161.$reduce_or$<techmap.v>:441$1384 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$177.$reduce_or$<techmap.v>:445$1379 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$312.$reduce_or$<techmap.v>:441$1486 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$312.$reduce_or$<techmap.v>:441$1487 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$312.$and$<techmap.v>:434$1485 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$312.$and$<techmap.v>:434$1484 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$312.$and$<techmap.v>:434$1483 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$312.$ternary$<techmap.v>:445$1482 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$312.$reduce_or$<techmap.v>:445$1481 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$350.$reduce_or$<techmap.v>:441$1486 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$350.$reduce_or$<techmap.v>:441$1487 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$350.$and$<techmap.v>:434$1485 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$350.$and$<techmap.v>:434$1484 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$350.$and$<techmap.v>:434$1483 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$350.$ternary$<techmap.v>:445$1482 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$350.$reduce_or$<techmap.v>:445$1481 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$389.$and$<techmap.v>:434$1091 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$389.$reduce_or$<techmap.v>:441$1092 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$389.$and$<techmap.v>:434$1090 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$389.$ternary$<techmap.v>:445$1089 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$389.$reduce_or$<techmap.v>:445$1088 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$598.$reduce_or$<techmap.v>:441$1383 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$598.$reduce_or$<techmap.v>:441$1384 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$598.$and$<techmap.v>:434$1382 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$598.$and$<techmap.v>:434$1381 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$598.$ternary$<techmap.v>:445$1380 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$598.$reduce_or$<techmap.v>:445$1379 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$618.$reduce_or$<techmap.v>:441$1486 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$618.$reduce_or$<techmap.v>:441$1487 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$618.$and$<techmap.v>:434$1485 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$618.$and$<techmap.v>:434$1484 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$618.$and$<techmap.v>:434$1483 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$618.$ternary$<techmap.v>:445$1482 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$618.$reduce_or$<techmap.v>:445$1481 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$628.$reduce_or$<techmap.v>:441$1383 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$628.$reduce_or$<techmap.v>:441$1384 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$628.$and$<techmap.v>:434$1382 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$628.$and$<techmap.v>:434$1381 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$628.$ternary$<techmap.v>:445$1380 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$628.$reduce_or$<techmap.v>:445$1379 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$638.$and$<techmap.v>:434$1091 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$638.$reduce_or$<techmap.v>:441$1092 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$638.$and$<techmap.v>:434$1090 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$638.$ternary$<techmap.v>:445$1089 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$638.$reduce_or$<techmap.v>:445$1088 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$648.$and$<techmap.v>:434$1091 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$648.$reduce_or$<techmap.v>:441$1092 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$648.$and$<techmap.v>:434$1090 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$648.$ternary$<techmap.v>:445$1089 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$648.$reduce_or$<techmap.v>:445$1088 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$658.$and$<techmap.v>:434$1091 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$658.$reduce_or$<techmap.v>:441$1092 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$658.$and$<techmap.v>:434$1090 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$658.$ternary$<techmap.v>:445$1089 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$658.$reduce_or$<techmap.v>:445$1088 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$668.$and$<techmap.v>:434$1091 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$668.$reduce_or$<techmap.v>:441$1092 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$668.$and$<techmap.v>:434$1090 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$668.$ternary$<techmap.v>:445$1089 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$668.$reduce_or$<techmap.v>:445$1088 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$678.$and$<techmap.v>:434$1183 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$678.$reduce_or$<techmap.v>:441$1184 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$678.$and$<techmap.v>:434$1182 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$678.$and$<techmap.v>:434$1181 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$678.$ternary$<techmap.v>:445$1180 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$678.$reduce_or$<techmap.v>:445$1179 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$reduce_or$<techmap.v>:441$1636 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$reduce_or$<techmap.v>:441$1637 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$reduce_or$<techmap.v>:441$1635 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$reduce_or$<techmap.v>:441$1634 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$and$<techmap.v>:434$1633 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$and$<techmap.v>:434$1632 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$and$<techmap.v>:434$1631 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$ternary$<techmap.v>:445$1630 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$688.$reduce_or$<techmap.v>:445$1629 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$reduce_or$<techmap.v>:441$1636 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$reduce_or$<techmap.v>:441$1637 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$reduce_or$<techmap.v>:441$1635 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$reduce_or$<techmap.v>:441$1634 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$and$<techmap.v>:434$1633 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$and$<techmap.v>:434$1632 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$and$<techmap.v>:434$1631 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$ternary$<techmap.v>:445$1630 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$698.$reduce_or$<techmap.v>:445$1629 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$709.$reduce_or$<techmap.v>:441$1349 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$709.$reduce_or$<techmap.v>:441$1350 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$709.$reduce_or$<techmap.v>:441$1348 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$709.$reduce_or$<techmap.v>:441$1347 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$709.$and$<techmap.v>:434$1346 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$709.$and$<techmap.v>:434$1345 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$709.$ternary$<techmap.v>:445$1344 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$709.$reduce_or$<techmap.v>:445$1343 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$719.$reduce_or$<techmap.v>:441$1486 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$719.$reduce_or$<techmap.v>:441$1487 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$719.$and$<techmap.v>:434$1485 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$719.$and$<techmap.v>:434$1484 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$719.$and$<techmap.v>:434$1483 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$719.$ternary$<techmap.v>:445$1482 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$719.$reduce_or$<techmap.v>:445$1481 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$738.$reduce_or$<techmap.v>:441$1651 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$738.$reduce_or$<techmap.v>:441$1652 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$738.$reduce_or$<techmap.v>:441$1650 ($reduce_or) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$738.$and$<techmap.v>:434$1649 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$738.$and$<techmap.v>:434$1648 ($and) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$738.$ternary$<techmap.v>:445$1647 ($mux) with simplemap.
Mapping NRISC_InstructionDecoder.$techmap$procmux$738.$reduce_or$<techmap.v>:445$1646 ($reduce_or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1187' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1185 [0] = \CORE_InstructionIN [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$979' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$977 [0] = \CORE_InstructionIN [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1127' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1123 [2] = \CORE_InstructionIN [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1128' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1123 [3] = \CORE_InstructionIN [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1125' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1123 [0] = \CORE_InstructionIN [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1005' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1003 [0] = \CORE_InstructionIN [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1006' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1003 [1] = \CORE_InstructionIN [13]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1113' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1108 [3] = \CORE_InstructionIN [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1112' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1108 [2] = \CORE_InstructionIN [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1031' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1029 [0] = \CORE_InstructionIN [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1098' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1093 [3] = \CORE_InstructionIN [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1095' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1093 [0] = \CORE_InstructionIN [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1096' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1093 [1] = \CORE_InstructionIN [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1033' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1029 [2] = \CORE_InstructionIN [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1044' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1042 [0] = \CORE_InstructionIN [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1405' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1403 [0] = \CORE_InstructionIN [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1407' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1403 [2] = \CORE_InstructionIN [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1393' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1390 [1] = \CORE_InstructionIN [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1394' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1390 [2] = \CORE_InstructionIN [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1228' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1226 [0] = \CORE_InstructionIN [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1216' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1211 [3] = \CORE_InstructionIN [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1215' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1211 [2] = \CORE_InstructionIN [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1214' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1211 [1] = \CORE_InstructionIN [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1353' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1351 [0] = \CORE_InstructionIN [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1198' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1195 [1] = \CORE_InstructionIN [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1078' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1073 [3] = \CORE_InstructionIN [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$920' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$918 [0] = \CORE_InstructionIN [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$922' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$918 [2] = \CORE_InstructionIN [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1076' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1073 [1] = \CORE_InstructionIN [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1289' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1284 [3] = \CORE_InstructionIN [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1287' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1284 [1] = \CORE_InstructionIN [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1274' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1269 [3] = \CORE_InstructionIN [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1272' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1269 [1] = \CORE_InstructionIN [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1271' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1269 [0] = \CORE_InstructionIN [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1319' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1314 [3] = \CORE_InstructionIN [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1304' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1299 [3] = \CORE_InstructionIN [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1301' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1299 [0] = \CORE_InstructionIN [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$937' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$933 [2] = \CORE_InstructionIN [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1246' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1241 [3] = \CORE_InstructionIN [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1245' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1241 [2] = \CORE_InstructionIN [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1231' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1226 [3] = \CORE_InstructionIN [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1230' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1226 [2] = \CORE_InstructionIN [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1063' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1060 [1] = \CORE_InstructionIN [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1143' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1138 [3] = \CORE_InstructionIN [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1142' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1138 [2] = \CORE_InstructionIN [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1141' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1138 [1] = \CORE_InstructionIN [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$993' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$990 [1] = \CORE_InstructionIN [13]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1259' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1256 [1] = \CORE_InstructionIN [13]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1260' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1256 [2] = \CORE_InstructionIN [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1020' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1016 [2] = \CORE_InstructionIN [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1490' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1488 [0] = \CORE_InstructionIN [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1492' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1488 [2] = \CORE_InstructionIN [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1493' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1488 [3] = \CORE_InstructionIN [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1494' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1488 [4] = \CORE_InstructionIN [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1495' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1488 [5] = \CORE_InstructionIN [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1496' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1488 [6] = \CORE_InstructionIN [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1497' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1488 [7] = \CORE_InstructionIN [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1980' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$312.$and$<techmap.v>:434$1484_Y [0] = $procmux$314_CMP'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1461' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [2] = \CORE_InstructionIN [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1462' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [3] = \CORE_InstructionIN [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1463' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [4] = \CORE_InstructionIN [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1464' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [5] = \CORE_InstructionIN [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1465' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [6] = \CORE_InstructionIN [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1466' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [7] = \CORE_InstructionIN [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1982' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$312.$and$<techmap.v>:434$1483_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1971' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1970 = $procmux$314_CMP'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1515' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1512 [1] = \CORE_InstructionIN [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1516' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1512 [2] = \CORE_InstructionIN [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1517' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1512 [3] = \CORE_InstructionIN [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1518' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1512 [4] = \CORE_InstructionIN [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1519' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1512 [5] = \CORE_InstructionIN [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1520' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1512 [6] = \CORE_InstructionIN [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1521' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1512 [7] = \CORE_InstructionIN [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1978' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$312.$and$<techmap.v>:434$1485_Y [0] = $procmux$315_CMP'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1453' in module `NRISC_InstructionDecoder'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1981' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$312.$and$<techmap.v>:434$1484_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1983' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$312.$and$<techmap.v>:434$1483_Y [1] = $procmux$313_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1975' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1974 = $procmux$313_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1979' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$312.$and$<techmap.v>:434$1485_Y [1] = $procmux$315_CMP'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1454' in module `NRISC_InstructionDecoder'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1543' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1539 [2] = \CORE_InstructionIN [10]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2010' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$389.$and$<techmap.v>:434$1091_Y = $procmux$391_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2013' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$389.$and$<techmap.v>:434$1090_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2012' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$389.$reduce_or$<techmap.v>:441$1092_Y = $procmux$391_CMP'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1538' in module `NRISC_InstructionDecoder'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1962' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$161.$and$<techmap.v>:434$1381_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1964' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$161.$and$<techmap.v>:434$1382_Y [0] = $procmux$163_CTRL'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1748' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$161.$reduce_or$<techmap.v>:441$1383_Y = $procmux$163_CTRL'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1963' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$161.$and$<techmap.v>:434$1381_Y [1] = $procmux$162_CTRL'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1965' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$161.$and$<techmap.v>:434$1382_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1967' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$161.$reduce_or$<techmap.v>:441$1384_Y = $procmux$162_CTRL'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1751' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$177.$and$<techmap.v>:434$1381_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1753' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$177.$and$<techmap.v>:434$1382_Y [0] = $procmux$163_CTRL'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1758' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$177.$reduce_or$<techmap.v>:441$1383_Y = $procmux$163_CTRL'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1752' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$177.$and$<techmap.v>:434$1381_Y [1] = $procmux$162_CTRL'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1754' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$177.$and$<techmap.v>:434$1382_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1756' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$177.$reduce_or$<techmap.v>:441$1384_Y = $procmux$162_CTRL'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2000' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$350.$and$<techmap.v>:434$1484_Y [0] = $procmux$163_CMP [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2002' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$350.$and$<techmap.v>:434$1483_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1991' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1990 = $procmux$163_CMP [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1998' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$350.$and$<techmap.v>:434$1485_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1993' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$350.$reduce_or$<techmap.v>:441$1486_Y = $procmux$163_CMP [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2001' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$350.$and$<techmap.v>:434$1484_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2003' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$350.$and$<techmap.v>:434$1483_Y [1] = $procmux$351_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1995' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1994 = $procmux$351_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1999' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$350.$and$<techmap.v>:434$1485_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1997' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$350.$reduce_or$<techmap.v>:441$1487_Y = $procmux$351_CMP'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1611' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1612' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1613' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1614' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1615' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1616' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1617' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1618' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1642' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1643' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1644' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1645' in module `NRISC_InstructionDecoder'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2023' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$598.$and$<techmap.v>:434$1381_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2018' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$598.$reduce_or$<techmap.v>:441$1383_Y = $techmap$procmux$598.$and$<techmap.v>:434$1382_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2024' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$598.$and$<techmap.v>:434$1381_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2020' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$598.$reduce_or$<techmap.v>:441$1384_Y = $techmap$procmux$598.$and$<techmap.v>:434$1382_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2041' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$618.$and$<techmap.v>:434$1483_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2030' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2029 = $techmap$procmux$618.$and$<techmap.v>:434$1484_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2042' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$618.$and$<techmap.v>:434$1483_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2034' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2033 = $techmap$procmux$618.$and$<techmap.v>:434$1484_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2055' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$628.$and$<techmap.v>:434$1381_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2050' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$628.$reduce_or$<techmap.v>:441$1383_Y = $techmap$procmux$628.$and$<techmap.v>:434$1382_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2056' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$628.$and$<techmap.v>:434$1381_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2052' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$628.$reduce_or$<techmap.v>:441$1384_Y = $techmap$procmux$628.$and$<techmap.v>:434$1382_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1759' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$38.$and$<techmap.v>:434$1090_Y = $auto$opt_reduce.cc:132:opt_mux$842'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1784' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$38.$and$<techmap.v>:434$1091_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1777' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$38.$reduce_or$<techmap.v>:441$1092_Y = $auto$opt_reduce.cc:132:opt_mux$842'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2064' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$638.$and$<techmap.v>:434$1090_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2063' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$638.$reduce_or$<techmap.v>:441$1092_Y = $techmap$procmux$638.$and$<techmap.v>:434$1091_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1833' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1165_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1821' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1161_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1824' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1162_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1837' (00) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1836 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1827' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1163_Y [0] = $procmux$41_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1830' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1164_Y [0] = $procmux$42_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1840' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1839 = $auto$simplemap.cc:127:simplemap_reduce$1836 [1]'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1842' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$reduce_or$<techmap.v>:441$1166_Y = $auto$simplemap.cc:127:simplemap_reduce$1836 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1764' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$25.$and$<techmap.v>:434$1054_Y [0] = $procmux$26_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1834' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1165_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1822' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1161_Y [1] = $procmux$39_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1825' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1162_Y [1] = $procmux$40_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1828' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1163_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1831' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1164_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1852' (00) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1850 [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1854' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1853 = $auto$simplemap.cc:127:simplemap_reduce$1850 [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1856' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$reduce_or$<techmap.v>:441$1167_Y = $auto$simplemap.cc:127:simplemap_reduce$1850 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1765' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$25.$and$<techmap.v>:434$1054_Y [1] = $procmux$26_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1861' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$25.$and$<techmap.v>:434$1055_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1871' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1870 = $procmux$26_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1835' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1165_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1823' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1161_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1826' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1162_Y [2] = $procmux$40_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1844' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1843 [0] = $procmux$40_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1829' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1163_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1832' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$and$<techmap.v>:434$1164_Y [2] = $procmux$42_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1845' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1843 [1] = $procmux$42_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1849' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$70.$reduce_or$<techmap.v>:441$1168_Y = $auto$simplemap.cc:127:simplemap_reduce$1846'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1865' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$25.$and$<techmap.v>:434$1056_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1766' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$25.$and$<techmap.v>:434$1054_Y [2] = $procmux$26_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1862' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$25.$and$<techmap.v>:434$1055_Y [2] = $procmux$27_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1869' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$25.$reduce_or$<techmap.v>:441$1059_Y = $auto$simplemap.cc:127:simplemap_reduce$1866'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2068' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$648.$and$<techmap.v>:434$1091_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2071' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$648.$and$<techmap.v>:434$1090_Y = $procmux$15_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2070' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$648.$reduce_or$<techmap.v>:441$1092_Y = $procmux$15_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1877' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$1090_Y = $auto$opt_reduce.cc:132:opt_mux$842'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1880' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$54.$and$<techmap.v>:434$1091_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1879' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$54.$reduce_or$<techmap.v>:441$1092_Y = $auto$opt_reduce.cc:132:opt_mux$842'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2078' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$658.$and$<techmap.v>:434$1090_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2077' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$658.$reduce_or$<techmap.v>:441$1092_Y = $techmap$procmux$658.$and$<techmap.v>:434$1091_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2082' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$668.$and$<techmap.v>:434$1091_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2085' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$668.$and$<techmap.v>:434$1090_Y = $procmux$15_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2084' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$668.$reduce_or$<techmap.v>:441$1092_Y = $procmux$15_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2094' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$678.$and$<techmap.v>:434$1182_Y = $procmux$16_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2095' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$678.$and$<techmap.v>:434$1181_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2091' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2090 = $procmux$16_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2121' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$688.$and$<techmap.v>:434$1632_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2114' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2113 = $techmap$procmux$688.$and$<techmap.v>:434$1631_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2122' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$688.$and$<techmap.v>:434$1632_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2110' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2109 = $techmap$procmux$688.$and$<techmap.v>:434$1631_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2123' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$688.$and$<techmap.v>:434$1632_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2102' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2101 = $techmap$procmux$688.$and$<techmap.v>:434$1631_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2124' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$688.$and$<techmap.v>:434$1632_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2106' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2105 = $techmap$procmux$688.$and$<techmap.v>:434$1631_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1791' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$147.$and$<techmap.v>:434$1345_Y [0] = $procmux$122_CTRL'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1792' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$147.$and$<techmap.v>:434$1345_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1802' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$147.$reduce_or$<techmap.v>:441$1348_Y = $techmap$procmux$147.$and$<techmap.v>:434$1346_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1793' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$147.$and$<techmap.v>:434$1345_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1806' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$147.$reduce_or$<techmap.v>:441$1349_Y = $techmap$procmux$147.$and$<techmap.v>:434$1346_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1794' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$147.$and$<techmap.v>:434$1345_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1804' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$147.$reduce_or$<techmap.v>:441$1350_Y = $techmap$procmux$147.$and$<techmap.v>:434$1346_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1937' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$967_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1947' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$966_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1909' (00) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1908 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1929' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$969_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1933' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$968_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1910' (00) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1908 [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1913' (00) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1912 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1921' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$970_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1911' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1908 [2] = $techmap$procmux$10.$and$<techmap.v>:434$971_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1917' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$972_Y [0] = $procmux$112_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1916' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$reduce_or$<techmap.v>:441$973_Y = $auto$simplemap.cc:127:simplemap_reduce$1912 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2185' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$709.$and$<techmap.v>:434$1345_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2180' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$709.$reduce_or$<techmap.v>:441$1347_Y = $techmap$procmux$709.$and$<techmap.v>:434$1346_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1938' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$967_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1948' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$966_Y [1] = $procmux$11_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1900' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1899 [0] = $procmux$11_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1930' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$969_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1934' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$968_Y [1] = $procmux$13_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1901' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1899 [1] = $procmux$13_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1926' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$971_Y [1] = $procmux$16_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1918' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$972_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1905' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1903 [1] = $auto$simplemap.cc:127:simplemap_reduce$1899 [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2186' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$709.$and$<techmap.v>:434$1345_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2178' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$709.$reduce_or$<techmap.v>:441$1348_Y = $techmap$procmux$709.$and$<techmap.v>:434$1346_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1939' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$967_Y [2] = $procmux$12_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1949' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$966_Y [2] = $procmux$11_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1931' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$969_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1935' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$968_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1892' (00) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1890 [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1895' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1894 [0] = $auto$simplemap.cc:127:simplemap_reduce$1890 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1923' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$970_Y [2] = $procmux$15_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1927' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$971_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1893' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1890 [2] = $procmux$15_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1919' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$972_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1896' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1894 [1] = $procmux$15_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2187' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$709.$and$<techmap.v>:434$1345_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2174' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$709.$reduce_or$<techmap.v>:441$1349_Y = $techmap$procmux$709.$and$<techmap.v>:434$1346_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1940' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$967_Y [3] = $procmux$12_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1950' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$966_Y [3] = $procmux$11_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1932' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$969_Y [3] = $procmux$14_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1936' (1?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$968_Y [3] = $procmux$13_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1924' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$970_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1928' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$971_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1884' (00) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1881 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1920' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$and$<techmap.v>:434$972_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1887' (00) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1885 [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1889' (?0) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$10.$reduce_or$<techmap.v>:441$976_Y = $auto$simplemap.cc:127:simplemap_reduce$1885 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2188' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$709.$and$<techmap.v>:434$1345_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2176' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$709.$reduce_or$<techmap.v>:441$1350_Y = $techmap$procmux$709.$and$<techmap.v>:434$1346_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2207' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$719.$and$<techmap.v>:434$1483_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2196' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2195 = $techmap$procmux$719.$and$<techmap.v>:434$1484_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2208' (const_and) in module `\NRISC_InstructionDecoder' with constant driver `$techmap$procmux$719.$and$<techmap.v>:434$1483_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2200' (0?) in module `\NRISC_InstructionDecoder' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2199 = $techmap$procmux$719.$and$<techmap.v>:434$1484_Y [1]'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1528' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1571'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1524 [3] = $auto$simplemap.cc:168:logic_reduce$1567 [3]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1528' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1527' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1570'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1524 [2] = $auto$simplemap.cc:168:logic_reduce$1567 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1527' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1526' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1569'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1524 [1] = $auto$simplemap.cc:168:logic_reduce$1567 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1526' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1504' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1571'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1500 [3] = $auto$simplemap.cc:168:logic_reduce$1567 [3]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1504' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1503' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1570'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1500 [2] = $auto$simplemap.cc:168:logic_reduce$1567 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1503' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1502' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1569'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1500 [1] = $auto$simplemap.cc:168:logic_reduce$1567 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1502' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1473' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1571'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1469 [3] = $auto$simplemap.cc:168:logic_reduce$1567 [3]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1473' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1472' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1570'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1469 [2] = $auto$simplemap.cc:168:logic_reduce$1567 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1472' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1471' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1569'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1469 [1] = $auto$simplemap.cc:168:logic_reduce$1567 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1471' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1460' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1491'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1457 [1] = $auto$simplemap.cc:250:simplemap_eqne$1488 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1460' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1459' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1514'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1457 [0] = $auto$simplemap.cc:250:simplemap_eqne$1512 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1459' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1443' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1639'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1442 = $auto$simplemap.cc:127:simplemap_reduce$1638
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1443' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1952' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1891'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1951 [0] = $auto$simplemap.cc:127:simplemap_reduce$1890 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1952' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1406' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1403 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1406' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1392' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1541'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1390 [0] = $auto$simplemap.cc:250:simplemap_eqne$1539 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1392' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1367' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1364 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1367' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1366' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1541'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1364 [0] = $auto$simplemap.cc:250:simplemap_eqne$1539 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1366' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1354' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1351 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1354' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1355' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1368'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1351 [2] = $auto$simplemap.cc:250:simplemap_eqne$1364 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1355' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1867' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1761'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1866 = $auto$simplemap.cc:127:simplemap_reduce$1760
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1867' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1340' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1621'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [1] = $auto$simplemap.cc:127:simplemap_reduce$1619 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1340' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1339' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1620'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1338 [0] = $auto$simplemap.cc:127:simplemap_reduce$1619 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1339' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1335' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1623'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1333 [1] = $auto$simplemap.cc:127:simplemap_reduce$1619 [3]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1335' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1334' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1622'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1333 [0] = $auto$simplemap.cc:127:simplemap_reduce$1619 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1334' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1318' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1368'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1314 [2] = $auto$simplemap.cc:250:simplemap_eqne$1364 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1318' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1317' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1314 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1317' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1316' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1541'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1314 [0] = $auto$simplemap.cc:250:simplemap_eqne$1539 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1316' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1303' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1368'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1299 [2] = $auto$simplemap.cc:250:simplemap_eqne$1364 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1303' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1302' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1299 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1302' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1288' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1368'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1284 [2] = $auto$simplemap.cc:250:simplemap_eqne$1364 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1288' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1286' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1541'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1284 [0] = $auto$simplemap.cc:250:simplemap_eqne$1539 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1286' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1278' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1386'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1277 [0] = $auto$simplemap.cc:168:logic_reduce$1385
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1278' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1273' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1368'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1269 [2] = $auto$simplemap.cc:250:simplemap_eqne$1364 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1273' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2134' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2098'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2133 = $auto$simplemap.cc:127:simplemap_reduce$2097
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2134' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1244' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1241 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1244' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1243' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1541'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1241 [0] = $auto$simplemap.cc:250:simplemap_eqne$1539 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1243' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1236' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1251'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1234 [1] = $auto$simplemap.cc:127:simplemap_reduce$1249 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1236' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1229' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1226 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1229' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1221' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1251'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1219 [1] = $auto$simplemap.cc:127:simplemap_reduce$1249 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1221' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2170' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2046'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2169 = $auto$simplemap.cc:127:simplemap_reduce$2045
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2170' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1213' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1541'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1211 [0] = $auto$simplemap.cc:250:simplemap_eqne$1539 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1213' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1207' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1251'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1205 [1] = $auto$simplemap.cc:127:simplemap_reduce$1249 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1207' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1206' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1386'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1205 [0] = $auto$simplemap.cc:168:logic_reduce$1385
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1206' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1197' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1541'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1195 [0] = $auto$simplemap.cc:250:simplemap_eqne$1539 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1197' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1188' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1185 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1188' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1171' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1541'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1169 [0] = $auto$simplemap.cc:250:simplemap_eqne$1539 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1171' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1172' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1542'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1169 [1] = $auto$simplemap.cc:250:simplemap_eqne$1539 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1172' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1882' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1891'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1881 [0] = $auto$simplemap.cc:127:simplemap_reduce$1890 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1882' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1883' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1953'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1881 [1] = $auto$simplemap.cc:127:simplemap_reduce$1951 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1883' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1155' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1569'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1153 [1] = $auto$simplemap.cc:168:logic_reduce$1567 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1155' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1154' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1568'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1153 [0] = $auto$simplemap.cc:168:logic_reduce$1567 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1154' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1148' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1569'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1146 [1] = $auto$simplemap.cc:168:logic_reduce$1567 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1148' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1140' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1514'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1138 [0] = $auto$simplemap.cc:250:simplemap_eqne$1512 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1140' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1133' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1569'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1131 [1] = $auto$simplemap.cc:168:logic_reduce$1567 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1133' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1126' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1491'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1123 [1] = $auto$simplemap.cc:250:simplemap_eqne$1488 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1126' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1118' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1569'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1116 [1] = $auto$simplemap.cc:168:logic_reduce$1567 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1118' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1111' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1491'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1108 [1] = $auto$simplemap.cc:250:simplemap_eqne$1488 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1111' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1110' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1514'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1108 [0] = $auto$simplemap.cc:250:simplemap_eqne$1512 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1110' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1102' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1568'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1101 [0] = $auto$simplemap.cc:168:logic_reduce$1567 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1102' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1077' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1097'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1073 [2] = $auto$simplemap.cc:250:simplemap_eqne$1093 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1077' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1075' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1514'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1073 [0] = $auto$simplemap.cc:250:simplemap_eqne$1512 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1075' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1071' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1251'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1070 = $auto$simplemap.cc:127:simplemap_reduce$1249 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1071' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1062' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1368'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1060 [0] = $auto$simplemap.cc:250:simplemap_eqne$1364 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1062' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1851' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1812'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1850 [0] = $auto$simplemap.cc:127:simplemap_reduce$1811 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1851' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1838' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1813'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1836 [1] = $auto$simplemap.cc:127:simplemap_reduce$1811 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1838' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1019' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1032'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1016 [1] = $auto$simplemap.cc:250:simplemap_eqne$1029 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1019' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1018' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1258'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1016 [0] = $auto$simplemap.cc:250:simplemap_eqne$1256 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1018' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1011' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1421'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1010 = $auto$simplemap.cc:168:logic_reduce$1420
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1011' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2212' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1433'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2211 = $auto$simplemap.cc:127:simplemap_reduce$1432
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2212' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$992' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1258'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$990 [0] = $auto$simplemap.cc:250:simplemap_eqne$1256 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$992' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$994' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1007'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$990 [2] = $auto$simplemap.cc:250:simplemap_eqne$1003 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$994' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$980' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1032'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$977 [1] = $auto$simplemap.cc:250:simplemap_eqne$1029 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$980' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$981' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1007'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$977 [2] = $auto$simplemap.cc:250:simplemap_eqne$1003 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$981' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$954' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1032'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$951 [1] = $auto$simplemap.cc:250:simplemap_eqne$1029 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$954' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$953' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1258'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$951 [0] = $auto$simplemap.cc:250:simplemap_eqne$1256 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$953' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$955' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1007'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$951 [2] = $auto$simplemap.cc:250:simplemap_eqne$1003 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$955' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$936' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1032'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$933 [1] = $auto$simplemap.cc:250:simplemap_eqne$1029 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$936' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$935' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1258'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$933 [0] = $auto$simplemap.cc:250:simplemap_eqne$1256 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$935' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$921' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1032'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$918 [1] = $auto$simplemap.cc:250:simplemap_eqne$1029 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$921' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$923' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$938'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$918 [3] = $auto$simplemap.cc:250:simplemap_eqne$933 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$923' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1456' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2007'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$826 = $auto$simplemap.cc:127:simplemap_reduce$2006
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1456' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1451' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1433'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$828 = $auto$simplemap.cc:127:simplemap_reduce$1432
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1451' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1441' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1954'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$818 = $auto$simplemap.cc:127:simplemap_reduce$1951 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1441' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1337' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1626'.
    Redirecting output \Y: $procmux$110_CTRL = $auto$simplemap.cc:127:simplemap_reduce$1624 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1337' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1342' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1625'.
    Redirecting output \Y: $procmux$122_CTRL = $auto$simplemap.cc:127:simplemap_reduce$1624 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1342' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1969' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1942'.
    Redirecting output \Y: $techmap$procmux$177.$reduce_or$<techmap.v>:445$1379_Y = $techmap$procmux$161.$reduce_or$<techmap.v>:445$1379_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1969' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1875' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1768'.
    Redirecting output \Y: $techmap$procmux$54.$reduce_or$<techmap.v>:445$1088_Y = $techmap$procmux$38.$reduce_or$<techmap.v>:445$1088_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1875' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2060' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2028'.
    Redirecting output \Y: $techmap$procmux$628.$reduce_or$<techmap.v>:445$1379_Y = $techmap$procmux$598.$reduce_or$<techmap.v>:445$1379_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2060' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2081' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2067'.
    Redirecting output \Y: $techmap$procmux$658.$reduce_or$<techmap.v>:445$1088_Y = $techmap$procmux$638.$reduce_or$<techmap.v>:445$1088_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2081' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2088' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2074'.
    Redirecting output \Y: $techmap$procmux$668.$reduce_or$<techmap.v>:445$1088_Y = $techmap$procmux$648.$reduce_or$<techmap.v>:445$1088_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2088' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2136' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2100'.
    Redirecting output \Y: $techmap$procmux$688.$reduce_or$<techmap.v>:445$1629_Y = $techmap$procmux$678.$reduce_or$<techmap.v>:445$1179_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2136' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2172' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2048'.
    Redirecting output \Y: $techmap$procmux$698.$reduce_or$<techmap.v>:445$1629_Y = $techmap$procmux$618.$reduce_or$<techmap.v>:445$1481_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2172' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2214' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2194'.
    Redirecting output \Y: $techmap$procmux$719.$reduce_or$<techmap.v>:445$1481_Y = $techmap$procmux$709.$reduce_or$<techmap.v>:445$1343_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2214' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2231' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1954'.
    Redirecting output \Y: $techmap$procmux$738.$reduce_or$<techmap.v>:445$1646_Y = $auto$simplemap.cc:127:simplemap_reduce$1951 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2231' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1531' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1574'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1529 [1] = $auto$simplemap.cc:168:logic_reduce$1572 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1531' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1507' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1574'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1505 [1] = $auto$simplemap.cc:168:logic_reduce$1572 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1507' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1476' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1574'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1474 [1] = $auto$simplemap.cc:168:logic_reduce$1572 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1476' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2046' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1957'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2045 = $auto$simplemap.cc:127:simplemap_reduce$1955 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2046' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1372' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1547'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1371 = $auto$simplemap.cc:127:simplemap_reduce$1546
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1372' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1359' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1411'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1358 = $auto$simplemap.cc:127:simplemap_reduce$1410
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1359' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1323' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1547'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1322 [0] = $auto$simplemap.cc:127:simplemap_reduce$1546
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1323' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1309' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1324'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1307 [1] = $auto$simplemap.cc:127:simplemap_reduce$1322 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1309' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1308' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1411'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1307 [0] = $auto$simplemap.cc:127:simplemap_reduce$1410
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1308' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1294' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1324'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1292 [1] = $auto$simplemap.cc:127:simplemap_reduce$1322 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1294' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1293' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1398'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1292 [0] = $auto$simplemap.cc:127:simplemap_reduce$1397
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1293' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1279' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1324'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1277 [1] = $auto$simplemap.cc:127:simplemap_reduce$1322 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1279' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1250' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1547'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1249 [0] = $auto$simplemap.cc:127:simplemap_reduce$1546
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1250' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1235' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1411'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1234 [0] = $auto$simplemap.cc:127:simplemap_reduce$1410
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1235' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1220' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1398'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1219 [0] = $auto$simplemap.cc:127:simplemap_reduce$1397
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1220' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1202' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1398'.
    Redirecting output \Y: $auto$simplemap.cc:256:simplemap_eqne$1199 = $auto$simplemap.cc:127:simplemap_reduce$1397
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1202' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1192' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1411'.
    Redirecting output \Y: $auto$simplemap.cc:256:simplemap_eqne$1189 = $auto$simplemap.cc:127:simplemap_reduce$1410
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1192' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1176' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1547'.
    Redirecting output \Y: $auto$simplemap.cc:256:simplemap_eqne$1173 = $auto$simplemap.cc:127:simplemap_reduce$1546
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1176' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1157' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1573'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1156 = $auto$simplemap.cc:168:logic_reduce$1572 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1157' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1147' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1525'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1146 [0] = $auto$simplemap.cc:127:simplemap_reduce$1524 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1147' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1150' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1530'.
    Redirecting output \Y: $auto$simplemap.cc:256:simplemap_eqne$1144 = $auto$simplemap.cc:127:simplemap_reduce$1529 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1150' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1132' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1501'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1131 [0] = $auto$simplemap.cc:127:simplemap_reduce$1500 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1132' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1135' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1506'.
    Redirecting output \Y: $auto$simplemap.cc:256:simplemap_eqne$1129 = $auto$simplemap.cc:127:simplemap_reduce$1505 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1135' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1117' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1470'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1116 [0] = $auto$simplemap.cc:127:simplemap_reduce$1469 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1117' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1120' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1475'.
    Redirecting output \Y: $auto$simplemap.cc:256:simplemap_eqne$1114 = $auto$simplemap.cc:127:simplemap_reduce$1474 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1120' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1083' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1103'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1081 [1] = $auto$simplemap.cc:127:simplemap_reduce$1101 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1083' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1082' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1525'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1081 [0] = $auto$simplemap.cc:127:simplemap_reduce$1524 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1082' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1067' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1324'.
    Redirecting output \Y: $auto$simplemap.cc:256:simplemap_eqne$1064 = $auto$simplemap.cc:127:simplemap_reduce$1322 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1067' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$998' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1264'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$997 = $auto$simplemap.cc:127:simplemap_reduce$1263
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$998' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$985' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1037'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$984 = $auto$simplemap.cc:127:simplemap_reduce$1036
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$985' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1956' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1886'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1955 [0] = $auto$simplemap.cc:127:simplemap_reduce$1885 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1956' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$959' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1024'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$958 = $auto$simplemap.cc:127:simplemap_reduce$1023
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$959' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$942' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1024'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$941 [0] = $auto$simplemap.cc:127:simplemap_reduce$1023
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$942' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$928' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$943'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$926 [1] = $auto$simplemap.cc:127:simplemap_reduce$941 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$928' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$927' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1037'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$926 [0] = $auto$simplemap.cc:127:simplemap_reduce$1036
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$927' from module `\NRISC_InstructionDecoder'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1786' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1628'.
    Redirecting output \Y: $techmap$procmux$147.$reduce_or$<techmap.v>:445$1343_Y = $auto$opt_reduce.cc:132:opt_mux$852
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1786' from module `\NRISC_InstructionDecoder'.
Removed a total of 130 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\NRISC_InstructionDecoder' to `<abc-temp-dir>/input.blif'..
Extracted 433 gates and 498 wires to a netlist network with 63 inputs and 44 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       50
ABC RESULTS:              AOI3 cells:       17
ABC RESULTS:              AOI4 cells:       11
ABC RESULTS:               MUX cells:      118
ABC RESULTS:              NAND cells:       21
ABC RESULTS:               NOR cells:       20
ABC RESULTS:               NOT cells:       51
ABC RESULTS:              OAI3 cells:       17
ABC RESULTS:              OAI4 cells:       17
ABC RESULTS:                OR cells:       24
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:        internal signals:      391
ABC RESULTS:           input signals:       63
ABC RESULTS:          output signals:       44
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2415' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2421' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2434' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2392' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2400' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2428' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2442' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2443' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2272' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2276' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2280' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2453' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2284' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2474' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2288' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2464' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2292' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2296' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2300' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2385' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2550' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2526' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2560' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2568' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2508' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2572' in module `NRISC_InstructionDecoder'.
Optimizing away select inverter for $_MUX_ cell `$abc$2232$auto$blifparse.cc:286:parse_blif$2573' in module `NRISC_InstructionDecoder'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \NRISC_InstructionDecoder

3.22.2. Analyzing design hierarchy..
Top module:  \NRISC_InstructionDecoder
Removed 0 unused modules.

3.23. Printing statistics.

=== NRISC_InstructionDecoder ===

   Number of wires:                342
   Number of wire bits:            418
   Number of public wires:          23
   Number of public wire bits:      71
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                391
     $_AND_                         50
     $_AOI3_                        17
     $_AOI4_                        11
     $_DFF_P_                       44
     $_MUX_                        118
     $_NAND_                        21
     $_NOR_                         20
     $_NOT_                         51
     $_OAI3_                        17
     $_OAI4_                        17
     $_OR_                          24
     $_XNOR_                         1

3.24. Executing CHECK pass (checking for obvious problems).
checking module NRISC_InstructionDecoder..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\NRISC_InstructionDecoder':
  mapped 44 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_InstructionDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_InstructionDecoder.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\NRISC_InstructionDecoder' to `<abc-temp-dir>/input.blif'..
Extracted 347 gates and 410 wires to a netlist network with 63 inputs and 44 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        6
ABC RESULTS:           AOI21X1 cells:       24
ABC RESULTS:           AOI22X1 cells:       10
ABC RESULTS:             INVX1 cells:       45
ABC RESULTS:            MUX2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:       38
ABC RESULTS:           NAND3X1 cells:       18
ABC RESULTS:            NOR2X1 cells:       30
ABC RESULTS:           OAI21X1 cells:       42
ABC RESULTS:           OAI22X1 cells:       11
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:      303
ABC RESULTS:           input signals:       63
ABC RESULTS:          output signals:       44
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 410 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port NRISC_InstructionDecoder.CORE_DATA_ADDR_mux using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_DATA_REGMux using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_DATA_ctrl using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_DATA_load using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_DATA_write using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_INT_CHA using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_INT_ctrl using BUFX2.
Don't map input port NRISC_InstructionDecoder.CORE_InstructionIN: Missing option -inpad.
Mapping port NRISC_InstructionDecoder.CORE_InstructionToULAMux using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_PC_clk using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_PC_ctrl using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_REG_RD using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_REG_RF1 using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_REG_RF2 using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_REG_write using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_STACK_ctrl using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_Status_ctrl using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_ULAMux_inc_dec using BUFX2.
Mapping port NRISC_InstructionDecoder.CORE_ULA_ctrl using BUFX2.
Don't map input port NRISC_InstructionDecoder.CORE_ULA_flags: Missing option -inpad.
Don't map input port NRISC_InstructionDecoder.CORE_ctrl: Missing option -inpad.
Don't map input port NRISC_InstructionDecoder.clk: Missing option -inpad.
Don't map input port NRISC_InstructionDecoder.rst: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_InstructionDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_InstructionDecoder.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_InstructionDecoder'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_InstructionDecoder..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

11. Printing statistics.

=== NRISC_InstructionDecoder ===

   Number of wires:                244
   Number of wire bits:            349
   Number of public wires:         244
   Number of public wire bits:     349
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                324
     AND2X2                          6
     AOI21X1                        24
     AOI22X1                        10
     BUFX2                          47
     DFFPOSX1                       44
     INVX1                          45
     MUX2X1                          8
     NAND2X1                        38
     NAND3X1                        18
     NOR2X1                         30
     OAI21X1                        42
     OAI22X1                        11
     OR2X2                           1

End of script. Logfile hash: 0f727acb7d
CPU: user 0.76s system 0.01s, MEM: 39.95 MB total, 13.05 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 17% 18x opt_expr (0 sec), 15% 17x opt_merge (0 sec), ...
Cleaning up output syntax
ypostproc.tcl NRISC_InstructionDecoder_mapped.blif NRISC_InstructionDecoder /usr/local/share/qflow/tech/osu035/osu035.sh
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I NRISC_InstructionDecoder_nofanout -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib  -b BUFX2 -i A -o Y tmp.blif NRISC_InstructionDecoder.blif

Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 27 (load 552.25) from node _16_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 5.37225 (latency = 1074.45 ps)
Top input node fanout is 44 (load 1782.7) from node clk.
Warning 1: load of 150.066 is 1.38074 times greater than strongest gate NOR2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 3: load of 163.985 is 1.61808 times greater than strongest gate NAND3X1
Warning 5: load of 265.636 is 2.44408 times greater than strongest gate NOR2X1
18 gates exceed specified minimum load.
15 buffers were added.
10 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 270    	Out: 260    	-10
	"2" gates	In: 54    	Out: 60    	+6

Number of gates changed: 25
gates resized: 25
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 8 (load 432.815) from node _17_,
driven by INVX4 with strength 417.401 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.35207 (latency = 470.414 ps)
Top input node fanout is 14 (load 365.863) from node CORE_InstructionIN<14>.
Warning 1: load of 442.815 is 1.07102 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 3: load of 150.066 is 1.38074 times greater than strongest gate NOR2X1
Warning 5: load of 163.985 is 1.61808 times greater than strongest gate NAND3X1
Warning 7: load of 265.636 is 2.44408 times greater than strongest gate NOR2X1
20 gates exceed specified minimum load.
0 buffers were added.
11 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 260    	Out: 260    	+0
	"2" gates	In: 75    	Out: 64    	-11
	"4" gates	In: 3    	Out: 14    	+11
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 11
gates resized: 11
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 8 (load 575.242) from node _17_,
driven by INVX4 with strength 417.401 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.35207 (latency = 470.414 ps)
Top input node fanout is 14 (load 365.863) from node CORE_InstructionIN<14>.
Warning 1: load of 585.242 is 1.41551 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 10: load of 163.985 is 1.61808 times greater than strongest gate NAND3X1
Warning 12: load of 265.636 is 2.44408 times greater than strongest gate NOR2X1
25 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 260    	Out: 260    	+0
	"2" gates	In: 64    	Out: 64    	+0
	"4" gates	In: 14    	Out: 14    	+0
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID
Files:
   Verilog: /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.rtl.v
   Verilog: /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.rtlnopwr.v
   Spice:   /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_ID/NRISC_InstructionDecoder.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on seg jan 8 22:55:04 -02 2018
