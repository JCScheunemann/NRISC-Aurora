Qflow synthesis logfile created on s√°b jan 13 16:59:49 -02 2018
Running yosys for verilog parsing and synthesis
yosys  -s NRISC_REGs.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `NRISC_REGs.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v' to AST representation.
Generating RTLIL representation for module `\NRISC_REGs'.
Warning: Blocking assignment to memory in line /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65 is handled like a non-blocking assignment.
Warning: Blocking assignment to memory in line /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68 is handled like a non-blocking assignment.
Warning: Blocking assignment to memory in line /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69 is handled like a non-blocking assignment.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \NRISC_REGs

3.1.2. Analyzing design hierarchy..
Top module:  \NRISC_REGs
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$50 in module NRISC_REGs.
Removed 1 dead cases from process $proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$47 in module NRISC_REGs.
Removed 1 dead cases from process $proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6 in module NRISC_REGs.
Removed a total of 3 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$50'.
     1/2: $1$mem2reg_rd$\REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:60$2_DATA[15:0]$52
     2/2: $0$mem2reg_rd$\REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:60$2_DATA[15:0]$51
Creating decoders for process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$47'.
     1/2: $1$mem2reg_rd$\REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:59$1_DATA[15:0]$49
     2/2: $0$mem2reg_rd$\REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:59$1_DATA[15:0]$48
Creating decoders for process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
     1/16: $0\REGS[15][15:0]
     2/16: $0\REGS[14][15:0]
     3/16: $0\REGS[13][15:0]
     4/16: $0\REGS[12][15:0]
     5/16: $0\REGS[11][15:0]
     6/16: $0\REGS[10][15:0]
     7/16: $0\REGS[9][15:0]
     8/16: $0\REGS[8][15:0]
     9/16: $0\REGS[7][15:0]
    10/16: $0\REGS[6][15:0]
    11/16: $0\REGS[5][15:0]
    12/16: $0\REGS[4][15:0]
    13/16: $0\REGS[3][15:0]
    14/16: $0\REGS[2][15:0]
    15/16: $0\REGS[1][15:0]
    16/16: $0\REGS[0][15:0]
Creating decoders for process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
     1/9: $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9
     2/9: $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_DATA[15:0]$8
     3/9: $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_ADDR[3:0]$7
     4/9: $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12
     5/9: $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_DATA[15:0]$11
     6/9: $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_ADDR[2:0]$10
     7/9: $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15
     8/9: $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_DATA[15:0]$14
     9/9: $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_ADDR[2:0]$13

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\NRISC_REGs.$mem2reg_rd$\REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:60$2_DATA' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$50'.
No latch inferred for signal `\NRISC_REGs.$mem2reg_rd$\REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:59$1_DATA' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$47'.
No latch inferred for signal `\NRISC_REGs.\REGS[0]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[1]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[2]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[3]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[4]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[5]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[6]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[7]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[8]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[9]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[10]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[11]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[12]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[13]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[14]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
No latch inferred for signal `\NRISC_REGs.\REGS[15]' from process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\NRISC_REGs.$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_ADDR' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$162' with positive edge clock.
Creating register for signal `\NRISC_REGs.$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_DATA' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$163' with positive edge clock.
Creating register for signal `\NRISC_REGs.$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$164' with positive edge clock.
Creating register for signal `\NRISC_REGs.$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_ADDR' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$165' with positive edge clock.
Creating register for signal `\NRISC_REGs.$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_DATA' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$166' with positive edge clock.
Creating register for signal `\NRISC_REGs.$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$167' with positive edge clock.
Creating register for signal `\NRISC_REGs.$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_ADDR' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$168' with positive edge clock.
Creating register for signal `\NRISC_REGs.$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_DATA' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$169' with positive edge clock.
Creating register for signal `\NRISC_REGs.$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN' using process `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
  created $dff cell `$procdff$170' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$50'.
Removing empty process `NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$50'.
Found and cleaned up 1 empty switch in `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$47'.
Removing empty process `NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$47'.
Removing empty process `NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:5$16'.
Found and cleaned up 3 empty switches in `\NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
Removing empty process `NRISC_REGs.$proc$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:62$6'.
Cleaned up 5 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$procmux$72_CMP0' in module `NRISC_REGs' with $logic_not.
Replacing $eq cell `$procmux$89_CMP0' in module `NRISC_REGs' with $logic_not.
Replacing $eq cell `$procmux$115_CMP0' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$procmux$124_CMP0' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$procmux$133_CMP0' in module `NRISC_REGs' with inverter.
Optimizing away select inverter for $mux cell `$procmux$114' in module `NRISC_REGs'.
Optimizing away select inverter for $mux cell `$procmux$123' in module `NRISC_REGs'.
Optimizing away select inverter for $mux cell `$procmux$132' in module `NRISC_REGs'.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..
  removing unused `$not' cell `$procmux$115_CMP0'.
  removing unused `$not' cell `$procmux$124_CMP0'.
  removing unused `$not' cell `$procmux$133_CMP0'.
  removing unused non-port wire \REGS[0].
  removed 1 unused temporary wires.

3.5. Executing CHECK pass (checking for obvious problems).
checking module NRISC_REGs..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
  Cell `$procmux$108_CMP0' is identical to cell `$procmux$101_CMP0'.
    Redirecting output \Y: $procmux$108_CMP [0] = $procmux$101_CMP [0]
    Removing $eq cell `$procmux$108_CMP0' from module `\NRISC_REGs'.
  Cell `$procmux$108_CMP1' is identical to cell `$procmux$101_CMP1'.
    Redirecting output \Y: $procmux$108_CMP [1] = $procmux$101_CMP [1]
    Removing $eq cell `$procmux$108_CMP1' from module `\NRISC_REGs'.
  Cell `$procmux$108_CMP2' is identical to cell `$procmux$101_CMP2'.
    Redirecting output \Y: $procmux$108_CMP [2] = $procmux$101_CMP [2]
    Removing $eq cell `$procmux$108_CMP2' from module `\NRISC_REGs'.
  Cell `$procmux$108_CMP3' is identical to cell `$procmux$101_CMP3'.
    Redirecting output \Y: $procmux$108_CMP [3] = $procmux$101_CMP [3]
    Removing $eq cell `$procmux$108_CMP3' from module `\NRISC_REGs'.
  Cell `$procmux$108_CMP4' is identical to cell `$procmux$101_CMP4'.
    Redirecting output \Y: $procmux$108_CMP [4] = $procmux$101_CMP [4]
    Removing $eq cell `$procmux$108_CMP4' from module `\NRISC_REGs'.
  Cell `$procmux$108_CMP5' is identical to cell `$procmux$101_CMP5'.
    Redirecting output \Y: $procmux$108_CMP [5] = $procmux$101_CMP [5]
    Removing $eq cell `$procmux$108_CMP5' from module `\NRISC_REGs'.
  Cell `$procmux$126_CMP0' is identical to cell `$procmux$117_CMP0'.
    Redirecting output \Y: $procmux$126_CMP [0] = $procmux$117_CMP [0]
    Removing $eq cell `$procmux$126_CMP0' from module `\NRISC_REGs'.
  Cell `$procmux$126_CMP1' is identical to cell `$procmux$117_CMP1'.
    Redirecting output \Y: $procmux$126_CMP [1] = $procmux$117_CMP [1]
    Removing $eq cell `$procmux$126_CMP1' from module `\NRISC_REGs'.
  Cell `$procmux$126_CMP2' is identical to cell `$procmux$117_CMP2'.
    Redirecting output \Y: $procmux$126_CMP [2] = $procmux$117_CMP [2]
    Removing $eq cell `$procmux$126_CMP2' from module `\NRISC_REGs'.
  Cell `$procmux$126_CMP3' is identical to cell `$procmux$117_CMP3'.
    Redirecting output \Y: $procmux$126_CMP [3] = $procmux$117_CMP [3]
    Removing $eq cell `$procmux$126_CMP3' from module `\NRISC_REGs'.
  Cell `$procmux$126_CMP4' is identical to cell `$procmux$117_CMP4'.
    Redirecting output \Y: $procmux$126_CMP [4] = $procmux$117_CMP [4]
    Removing $eq cell `$procmux$126_CMP4' from module `\NRISC_REGs'.
  Cell `$procmux$126_CMP5' is identical to cell `$procmux$117_CMP5'.
    Redirecting output \Y: $procmux$126_CMP [5] = $procmux$117_CMP [5]
    Removing $eq cell `$procmux$126_CMP5' from module `\NRISC_REGs'.
  Cell `$procmux$126_CMP6' is identical to cell `$procmux$117_CMP6'.
    Redirecting output \Y: $procmux$126_CMP [6] = $procmux$117_CMP [6]
    Removing $eq cell `$procmux$126_CMP6' from module `\NRISC_REGs'.
  Cell `$procmux$126_CMP7' is identical to cell `$procmux$117_CMP7'.
    Redirecting output \Y: $procmux$126_CMP [7] = $procmux$117_CMP [7]
    Removing $eq cell `$procmux$126_CMP7' from module `\NRISC_REGs'.
  Cell `$procmux$135_CMP0' is identical to cell `$procmux$117_CMP0'.
    Redirecting output \Y: $procmux$135_CMP [0] = $procmux$117_CMP [0]
    Removing $eq cell `$procmux$135_CMP0' from module `\NRISC_REGs'.
  Cell `$procmux$135_CMP1' is identical to cell `$procmux$117_CMP1'.
    Redirecting output \Y: $procmux$135_CMP [1] = $procmux$117_CMP [1]
    Removing $eq cell `$procmux$135_CMP1' from module `\NRISC_REGs'.
  Cell `$procmux$135_CMP2' is identical to cell `$procmux$117_CMP2'.
    Redirecting output \Y: $procmux$135_CMP [2] = $procmux$117_CMP [2]
    Removing $eq cell `$procmux$135_CMP2' from module `\NRISC_REGs'.
  Cell `$procmux$135_CMP3' is identical to cell `$procmux$117_CMP3'.
    Redirecting output \Y: $procmux$135_CMP [3] = $procmux$117_CMP [3]
    Removing $eq cell `$procmux$135_CMP3' from module `\NRISC_REGs'.
  Cell `$procmux$135_CMP4' is identical to cell `$procmux$117_CMP4'.
    Redirecting output \Y: $procmux$135_CMP [4] = $procmux$117_CMP [4]
    Removing $eq cell `$procmux$135_CMP4' from module `\NRISC_REGs'.
  Cell `$procmux$135_CMP5' is identical to cell `$procmux$117_CMP5'.
    Redirecting output \Y: $procmux$135_CMP [5] = $procmux$117_CMP [5]
    Removing $eq cell `$procmux$135_CMP5' from module `\NRISC_REGs'.
  Cell `$procmux$135_CMP6' is identical to cell `$procmux$117_CMP6'.
    Redirecting output \Y: $procmux$135_CMP [6] = $procmux$117_CMP [6]
    Removing $eq cell `$procmux$135_CMP6' from module `\NRISC_REGs'.
  Cell `$procmux$135_CMP7' is identical to cell `$procmux$117_CMP7'.
    Redirecting output \Y: $procmux$135_CMP [7] = $procmux$117_CMP [7]
    Removing $eq cell `$procmux$135_CMP7' from module `\NRISC_REGs'.
  Cell `$procmux$143_CMP0' is identical to cell `$procmux$117_CMP0'.
    Redirecting output \Y: $procmux$143_CMP [0] = $procmux$117_CMP [0]
    Removing $eq cell `$procmux$143_CMP0' from module `\NRISC_REGs'.
  Cell `$procmux$143_CMP1' is identical to cell `$procmux$117_CMP1'.
    Redirecting output \Y: $procmux$143_CMP [1] = $procmux$117_CMP [1]
    Removing $eq cell `$procmux$143_CMP1' from module `\NRISC_REGs'.
  Cell `$procmux$143_CMP2' is identical to cell `$procmux$117_CMP2'.
    Redirecting output \Y: $procmux$143_CMP [2] = $procmux$117_CMP [2]
    Removing $eq cell `$procmux$143_CMP2' from module `\NRISC_REGs'.
  Cell `$procmux$143_CMP3' is identical to cell `$procmux$117_CMP3'.
    Redirecting output \Y: $procmux$143_CMP [3] = $procmux$117_CMP [3]
    Removing $eq cell `$procmux$143_CMP3' from module `\NRISC_REGs'.
  Cell `$procmux$143_CMP4' is identical to cell `$procmux$117_CMP4'.
    Redirecting output \Y: $procmux$143_CMP [4] = $procmux$117_CMP [4]
    Removing $eq cell `$procmux$143_CMP4' from module `\NRISC_REGs'.
  Cell `$procmux$143_CMP5' is identical to cell `$procmux$117_CMP5'.
    Redirecting output \Y: $procmux$143_CMP [5] = $procmux$117_CMP [5]
    Removing $eq cell `$procmux$143_CMP5' from module `\NRISC_REGs'.
  Cell `$procmux$143_CMP6' is identical to cell `$procmux$117_CMP6'.
    Redirecting output \Y: $procmux$143_CMP [6] = $procmux$117_CMP [6]
    Removing $eq cell `$procmux$143_CMP6' from module `\NRISC_REGs'.
  Cell `$procmux$143_CMP7' is identical to cell `$procmux$117_CMP7'.
    Redirecting output \Y: $procmux$143_CMP [7] = $procmux$117_CMP [7]
    Removing $eq cell `$procmux$143_CMP7' from module `\NRISC_REGs'.
  Cell `$procmux$151_CMP0' is identical to cell `$procmux$117_CMP0'.
    Redirecting output \Y: $procmux$151_CMP [0] = $procmux$117_CMP [0]
    Removing $eq cell `$procmux$151_CMP0' from module `\NRISC_REGs'.
  Cell `$procmux$151_CMP1' is identical to cell `$procmux$117_CMP1'.
    Redirecting output \Y: $procmux$151_CMP [1] = $procmux$117_CMP [1]
    Removing $eq cell `$procmux$151_CMP1' from module `\NRISC_REGs'.
  Cell `$procmux$151_CMP2' is identical to cell `$procmux$117_CMP2'.
    Redirecting output \Y: $procmux$151_CMP [2] = $procmux$117_CMP [2]
    Removing $eq cell `$procmux$151_CMP2' from module `\NRISC_REGs'.
  Cell `$procmux$151_CMP3' is identical to cell `$procmux$117_CMP3'.
    Redirecting output \Y: $procmux$151_CMP [3] = $procmux$117_CMP [3]
    Removing $eq cell `$procmux$151_CMP3' from module `\NRISC_REGs'.
  Cell `$procmux$151_CMP4' is identical to cell `$procmux$117_CMP4'.
    Redirecting output \Y: $procmux$151_CMP [4] = $procmux$117_CMP [4]
    Removing $eq cell `$procmux$151_CMP4' from module `\NRISC_REGs'.
  Cell `$procmux$151_CMP5' is identical to cell `$procmux$117_CMP5'.
    Redirecting output \Y: $procmux$151_CMP [5] = $procmux$117_CMP [5]
    Removing $eq cell `$procmux$151_CMP5' from module `\NRISC_REGs'.
  Cell `$procmux$151_CMP6' is identical to cell `$procmux$117_CMP6'.
    Redirecting output \Y: $procmux$151_CMP [6] = $procmux$117_CMP [6]
    Removing $eq cell `$procmux$151_CMP6' from module `\NRISC_REGs'.
  Cell `$procmux$151_CMP7' is identical to cell `$procmux$117_CMP7'.
    Redirecting output \Y: $procmux$151_CMP [7] = $procmux$117_CMP [7]
    Removing $eq cell `$procmux$151_CMP7' from module `\NRISC_REGs'.
  Cell `$procmux$159_CMP0' is identical to cell `$procmux$117_CMP0'.
    Redirecting output \Y: $procmux$159_CMP [0] = $procmux$117_CMP [0]
    Removing $eq cell `$procmux$159_CMP0' from module `\NRISC_REGs'.
  Cell `$procmux$159_CMP1' is identical to cell `$procmux$117_CMP1'.
    Redirecting output \Y: $procmux$159_CMP [1] = $procmux$117_CMP [1]
    Removing $eq cell `$procmux$159_CMP1' from module `\NRISC_REGs'.
  Cell `$procmux$159_CMP2' is identical to cell `$procmux$117_CMP2'.
    Redirecting output \Y: $procmux$159_CMP [2] = $procmux$117_CMP [2]
    Removing $eq cell `$procmux$159_CMP2' from module `\NRISC_REGs'.
  Cell `$procmux$159_CMP3' is identical to cell `$procmux$117_CMP3'.
    Redirecting output \Y: $procmux$159_CMP [3] = $procmux$117_CMP [3]
    Removing $eq cell `$procmux$159_CMP3' from module `\NRISC_REGs'.
  Cell `$procmux$159_CMP4' is identical to cell `$procmux$117_CMP4'.
    Redirecting output \Y: $procmux$159_CMP [4] = $procmux$117_CMP [4]
    Removing $eq cell `$procmux$159_CMP4' from module `\NRISC_REGs'.
  Cell `$procmux$159_CMP5' is identical to cell `$procmux$117_CMP5'.
    Redirecting output \Y: $procmux$159_CMP [5] = $procmux$117_CMP [5]
    Removing $eq cell `$procmux$159_CMP5' from module `\NRISC_REGs'.
  Cell `$procmux$159_CMP6' is identical to cell `$procmux$117_CMP6'.
    Redirecting output \Y: $procmux$159_CMP [6] = $procmux$117_CMP [6]
    Removing $eq cell `$procmux$159_CMP6' from module `\NRISC_REGs'.
  Cell `$procmux$159_CMP7' is identical to cell `$procmux$117_CMP7'.
    Redirecting output \Y: $procmux$159_CMP [7] = $procmux$117_CMP [7]
    Removing $eq cell `$procmux$159_CMP7' from module `\NRISC_REGs'.
  Cell `$procmux$94_CMP0' is identical to cell `$procmux$101_CMP0'.
    Redirecting output \Y: $procmux$94_CMP [0] = $procmux$101_CMP [0]
    Removing $eq cell `$procmux$94_CMP0' from module `\NRISC_REGs'.
  Cell `$procmux$94_CMP1' is identical to cell `$procmux$101_CMP1'.
    Redirecting output \Y: $procmux$94_CMP [1] = $procmux$101_CMP [1]
    Removing $eq cell `$procmux$94_CMP1' from module `\NRISC_REGs'.
  Cell `$procmux$94_CMP2' is identical to cell `$procmux$101_CMP2'.
    Redirecting output \Y: $procmux$94_CMP [2] = $procmux$101_CMP [2]
    Removing $eq cell `$procmux$94_CMP2' from module `\NRISC_REGs'.
  Cell `$procmux$94_CMP3' is identical to cell `$procmux$101_CMP3'.
    Redirecting output \Y: $procmux$94_CMP [3] = $procmux$101_CMP [3]
    Removing $eq cell `$procmux$94_CMP3' from module `\NRISC_REGs'.
  Cell `$procmux$94_CMP4' is identical to cell `$procmux$101_CMP4'.
    Redirecting output \Y: $procmux$94_CMP [4] = $procmux$101_CMP [4]
    Removing $eq cell `$procmux$94_CMP4' from module `\NRISC_REGs'.
  Cell `$procmux$94_CMP5' is identical to cell `$procmux$101_CMP5'.
    Redirecting output \Y: $procmux$94_CMP [5] = $procmux$101_CMP [5]
    Removing $eq cell `$procmux$94_CMP5' from module `\NRISC_REGs'.
  Cell `$procmux$126_ANY' is identical to cell `$procmux$117_ANY'.
    Redirecting output \Y: $procmux$126_CTRL = $procmux$117_CTRL
    Removing $reduce_or cell `$procmux$126_ANY' from module `\NRISC_REGs'.
  Cell `$procmux$135_ANY' is identical to cell `$procmux$117_ANY'.
    Redirecting output \Y: $procmux$135_CTRL = $procmux$117_CTRL
    Removing $reduce_or cell `$procmux$135_ANY' from module `\NRISC_REGs'.
  Cell `$procmux$143_ANY' is identical to cell `$procmux$117_ANY'.
    Redirecting output \Y: $procmux$143_CTRL = $procmux$117_CTRL
    Removing $reduce_or cell `$procmux$143_ANY' from module `\NRISC_REGs'.
  Cell `$procmux$151_ANY' is identical to cell `$procmux$117_ANY'.
    Redirecting output \Y: $procmux$151_CTRL = $procmux$117_CTRL
    Removing $reduce_or cell `$procmux$151_ANY' from module `\NRISC_REGs'.
  Cell `$procmux$159_ANY' is identical to cell `$procmux$117_ANY'.
    Redirecting output \Y: $procmux$159_CTRL = $procmux$117_CTRL
    Removing $reduce_or cell `$procmux$159_ANY' from module `\NRISC_REGs'.
  Cell `$procmux$108_ANY' is identical to cell `$procmux$101_ANY'.
    Redirecting output \Y: $procmux$108_CTRL = $procmux$101_CTRL
    Removing $reduce_or cell `$procmux$108_ANY' from module `\NRISC_REGs'.
  Cell `$procmux$94_ANY' is identical to cell `$procmux$101_ANY'.
    Redirecting output \Y: $procmux$94_CTRL = $procmux$101_CTRL
    Removing $reduce_or cell `$procmux$94_ANY' from module `\NRISC_REGs'.
Removed a total of 59 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_REGs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$118 (pure)
    Root of a mux tree: $procmux$127 (pure)
    Root of a mux tree: $procmux$136 (pure)
    Root of a mux tree: $procmux$144 (pure)
    Root of a mux tree: $procmux$152 (pure)
    Root of a mux tree: $procmux$102 (pure)
    Root of a mux tree: $procmux$160 (pure)
    Root of a mux tree: $procmux$56 (pure)
    Root of a mux tree: $procmux$73 (pure)
    Root of a mux tree: $procmux$109 (pure)
    Root of a mux tree: $procmux$95 (pure)
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$25
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$28
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$31
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$34
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$37
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$40
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$43
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$46
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_REGs.
    New input vector for $reduce_or cell $procmux$101_ANY: { $procmux$101_CMP [0] $procmux$101_CMP [1] $procmux$101_CMP [2] $procmux$101_CMP [3] $procmux$101_CMP [4] $procmux$101_CMP [5] }
    New input vector for $reduce_or cell $procmux$117_ANY: { $procmux$117_CMP [0] $procmux$117_CMP [1] $procmux$117_CMP [2] $procmux$117_CMP [3] $procmux$117_CMP [4] $procmux$117_CMP [5] $procmux$117_CMP [6] $procmux$117_CMP [7] }
    Consolidated identical input bits for $mux cell $procmux$114:
      Old ports: A=16'1111111111111111, B=16'0000000000000000, Y=$procmux$114_Y
      New ports: A=1'1, B=1'0, Y=$procmux$114_Y [0]
      New connections: $procmux$114_Y [15:1] = { $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] $procmux$114_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$140:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$procmux$140_Y
      New ports: A=1'0, B=1'1, Y=$procmux$140_Y [0]
      New connections: $procmux$140_Y [15:1] = { $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] $procmux$140_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$93:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$procmux$93_Y
      New ports: A=1'0, B=1'1, Y=$procmux$93_Y [0]
      New connections: $procmux$93_Y [15:1] = { $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] $procmux$93_Y [0] }
  Optimizing cells in module \NRISC_REGs.
    Consolidated identical input bits for $mux cell $procmux$116:
      Old ports: A=16'0000000000000000, B=$procmux$114_Y, Y=$procmux$116_Y
      New ports: A=1'0, B=$procmux$114_Y [0], Y=$procmux$116_Y [0]
      New connections: $procmux$116_Y [15:1] = { $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] $procmux$116_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$142:
      Old ports: A=16'0000000000000000, B=$procmux$140_Y, Y=$procmux$142_Y
      New ports: A=1'0, B=$procmux$140_Y [0], Y=$procmux$142_Y [0]
      New connections: $procmux$142_Y [15:1] = { $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] $procmux$142_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$95:
      Old ports: A=16'0000000000000000, B=$procmux$93_Y, Y=$0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9
      New ports: A=1'0, B=$procmux$93_Y [0], Y=$0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0]
      New connections: $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [15:1] = { $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] $0$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN[15:0]$9 [0] }
  Optimizing cells in module \NRISC_REGs.
    Consolidated identical input bits for $mux cell $procmux$118:
      Old ports: A=16'0000000000000000, B=$procmux$116_Y, Y=$0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12
      New ports: A=1'0, B=$procmux$116_Y [0], Y=$0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0]
      New connections: $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [15:1] = { $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] $0$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN[15:0]$12 [0] }
    Consolidated identical input bits for $mux cell $procmux$144:
      Old ports: A=16'0000000000000000, B=$procmux$142_Y, Y=$0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15
      New ports: A=1'0, B=$procmux$142_Y [0], Y=$0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0]
      New connections: $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [15:1] = { $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] $0$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN[15:0]$15 [0] }
  Optimizing cells in module \NRISC_REGs.
Performed a total of 10 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_REGs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$102 (pure)
    Root of a mux tree: $procmux$109 (pure)
    Root of a mux tree: $procmux$118 (pure)
    Root of a mux tree: $procmux$127 (pure)
    Root of a mux tree: $procmux$136 (pure)
    Root of a mux tree: $procmux$144 (pure)
    Root of a mux tree: $procmux$152 (pure)
    Root of a mux tree: $procmux$160 (pure)
    Root of a mux tree: $procmux$56 (pure)
    Root of a mux tree: $procmux$73 (pure)
    Root of a mux tree: $procmux$95 (pure)
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$25
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$28
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$31
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$34
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$37
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$40
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$43
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$46
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_REGs.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$23 (FIRQ_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$26 (FIRQ_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$29 (FIRQ_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$32 (FIRQ_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$35 (FIRQ_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$38 (FIRQ_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$41 (FIRQ_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$44 (FIRQ_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$24 (USR_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$27 (USR_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$30 (USR_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$33 (USR_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$36 (USR_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$39 (USR_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$42 (USR_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$45 (USR_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:44$17 (global_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:45$18 (global_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:46$19 (global_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:47$20 (global_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:48$21 (global_REGS).
Removed top 29 address bits (of 32) from memory read port NRISC_REGs.$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:49$22 (global_REGS).
Removed top 1 address bits (of 4) from memory write port NRISC_REGs.$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$53 (global_REGS).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$65_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$66_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$67_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$68_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_REGs.$procmux$69_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_REGs.$procmux$70_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell NRISC_REGs.$procmux$71_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$82_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$83_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$84_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$85_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_REGs.$procmux$86_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_REGs.$procmux$87_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell NRISC_REGs.$procmux$88_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_REGs.$procmux$101_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell NRISC_REGs.$procmux$101_CMP1 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$101_CMP2 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$101_CMP3 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$101_CMP4 ($eq).
Removed top 1 bits (of 4) from port B of cell NRISC_REGs.$procmux$101_CMP5 ($eq).
Removed cell NRISC_REGs.$procmux$100 ($mux).
Removed cell NRISC_REGs.$procmux$102 ($mux).
Removed cell NRISC_REGs.$procmux$107 ($mux).
Removed cell NRISC_REGs.$procmux$109 ($mux).
Removed cell NRISC_REGs.$procmux$123 ($mux).
Removed cell NRISC_REGs.$procmux$125 ($mux).
Removed cell NRISC_REGs.$procmux$127 ($mux).
Removed cell NRISC_REGs.$procmux$132 ($mux).
Removed cell NRISC_REGs.$procmux$134 ($mux).
Removed cell NRISC_REGs.$procmux$136 ($mux).
Removed cell NRISC_REGs.$procmux$148 ($mux).
Removed cell NRISC_REGs.$procmux$150 ($mux).
Removed cell NRISC_REGs.$procmux$152 ($mux).
Removed cell NRISC_REGs.$procmux$156 ($mux).
Removed cell NRISC_REGs.$procmux$158 ($mux).
Removed cell NRISC_REGs.$procmux$160 ($mux).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module NRISC_REGs:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
  Cell `$procdff$166' is identical to cell `$procdff$163'.
    Redirecting output \Q: $memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_DATA = $memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_DATA
    Removing $dff cell `$procdff$166' from module `\NRISC_REGs'.
  Cell `$procdff$168' is identical to cell `$procdff$165'.
    Redirecting output \Q: $memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_ADDR = $memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_ADDR
    Removing $dff cell `$procdff$168' from module `\NRISC_REGs'.
  Cell `$procdff$169' is identical to cell `$procdff$163'.
    Redirecting output \Q: $memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_DATA = $memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_DATA
    Removing $dff cell `$procdff$169' from module `\NRISC_REGs'.
Removed a total of 3 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_REGs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$118 (pure)
    Root of a mux tree: $procmux$144 (pure)
    Root of a mux tree: $procmux$56 (pure)
    Root of a mux tree: $procmux$73 (pure)
    Root of a mux tree: $procmux$95 (pure)
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$25
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$28
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$31
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$34
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$37
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$40
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$43
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$46
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_REGs.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking NRISC_REGs.$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$5_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking NRISC_REGs.$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$4_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking NRISC_REGs.$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$3_EN as FSM state register:
    Users of register don't seem to benefit from recoding.

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$55' in module `\NRISC_REGs': merged $dff to cell.
Checking cell `$memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$54' in module `\NRISC_REGs': merged $dff to cell.
Checking cell `$memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$53' in module `\NRISC_REGs': merged $dff to cell.
Checking cell `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$23' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$26' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$29' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$32' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$35' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$38' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$41' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$44' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$24' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$27' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$30' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$33' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$36' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$39' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$42' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$45' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:44$17' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:45$18' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:46$19' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:47$20' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:48$21' in module `\NRISC_REGs': no (compatible) $dff found.
Checking cell `$memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:49$22' in module `\NRISC_REGs': no (compatible) $dff found.

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..
  removing unused `$dff' cell `$procdff$162'.
  removing unused `$dff' cell `$procdff$163'.
  removing unused `$dff' cell `$procdff$164'.
  removing unused `$dff' cell `$procdff$165'.
  removing unused `$dff' cell `$procdff$167'.
  removing unused `$dff' cell `$procdff$170'.

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\FIRQ_REGS' in module `\NRISC_REGs':
  $memwr$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:69$55 ($memwr)
  $memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$23 ($memrd)
  $memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$26 ($memrd)
  $memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$29 ($memrd)
  $memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$32 ($memrd)
  $memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$35 ($memrd)
  $memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$38 ($memrd)
  $memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$41 ($memrd)
  $memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$44 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\USR_REGS' in module `\NRISC_REGs':
  $memwr$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:68$54 ($memwr)
  $memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$24 ($memrd)
  $memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$27 ($memrd)
  $memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$30 ($memrd)
  $memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$33 ($memrd)
  $memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$36 ($memrd)
  $memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$39 ($memrd)
  $memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$42 ($memrd)
  $memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$45 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\global_REGS' in module `\NRISC_REGs':
  $memwr$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:65$53 ($memwr)
  $memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:44$17 ($memrd)
  $memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:45$18 ($memrd)
  $memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:46$19 ($memrd)
  $memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:47$20 ($memrd)
  $memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:48$21 ($memrd)
  $memrd$\global_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:49$22 ($memrd)

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimized away 1 select inputs of $pmux cell `$procmux$56' in module `NRISC_REGs'.
Optimized away 1 select inputs of $pmux cell `$procmux$73' in module `NRISC_REGs'.
Replacing $mux cell `$procmux$93' (mux_bool) in module `\NRISC_REGs' with constant driver `$procmux$93_Y [15] = $procmux$101_CTRL'.
Replacing $mux cell `$procmux$114' in module `NRISC_REGs' with inverter.
Replacing $mux cell `$procmux$140' (mux_bool) in module `\NRISC_REGs' with constant driver `$procmux$140_Y [15] = \REG_Interrupt_flag'.
Replacing $mux cell `$procmux$95' in module `NRISC_REGs' with and-gate.
Replacing $mux cell `$procmux$116' in module `NRISC_REGs' with and-gate.
Replacing $mux cell `$procmux$118' in module `NRISC_REGs' with and-gate.
Replacing $mux cell `$procmux$142' in module `NRISC_REGs' with and-gate.
Replacing $mux cell `$procmux$144' in module `NRISC_REGs' with and-gate.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..
  removing unused `$logic_not' cell `$procmux$72_CMP0'.
  removing unused `$logic_not' cell `$procmux$89_CMP0'.

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \FIRQ_REGS in module \NRISC_REGs:
  created 8 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 56 $mux cells.
  write interface: 8 write mux blocks.
Mapping memory cell \USR_REGS in module \NRISC_REGs:
  created 8 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 56 $mux cells.
  write interface: 8 write mux blocks.
Mapping memory cell \global_REGS in module \NRISC_REGs:
  created 6 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 42 $mux cells.
  write interface: 6 write mux blocks.

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[0][2][3]$b$676 [15:5]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[0][2][3]$a$675 [4:0]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[2][2][3]$b$722 [15:9]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[2][2][3]$a$721
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[0][2][3]$a$675 [13:8]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[1][2][3]$b$699
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[1][2][3]$a$698
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[2][2][3]$b$722 [6:4]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$b$745 [3:0]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$a$744 [6:4]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[4][2][3]$b$768
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[4][2][3]$a$767
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$a$744 [13:7]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[5][2][3]$b$791
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[5][2][3]$a$790
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[0][2][3]$a$675 [15]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[2][2][3]$b$722 [2:0]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[0][2][3]$a$675 [7]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[0][2][3]$a$675 [14]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[0][2][3]$b$676 [4:0]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[0][2][3]$a$675 [6:5]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$b$745 [11:10]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$a$744 [3:2]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$b$745 [15:14]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$b$745 [13:12]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$b$745 [9:4]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[2][2][3]$b$722 [3]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$a$744 [1:0]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[3][2][3]$a$744 [15:14]
Setting undriven signal in NRISC_REGs to undef: $memory\global_REGS$rdmux[2][2][3]$b$722 [8:7]
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$380' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$381 = \REG_RFD [1]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$372' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$373 = \REG_RFD [0]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$362' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$360' in module `NRISC_REGs' with inverter.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[1][2][0]$220' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[1][1][0]$a$215 = $memory\FIRQ_REGS$rdmux[1][2][0]$b$222'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[1][2][1]$223' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[1][1][0]$b$216 = $memory\FIRQ_REGS$rdmux[1][2][1]$b$225'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[1][1][0]$214' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[1][0][0]$a$212 = $memory\FIRQ_REGS$rdmux[1][1][0]$a$215'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[1][2][3]$229' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[1][1][1]$b$219 = $memory\FIRQ_REGS$rdmux[1][2][3]$b$231'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[1][2][2]$226' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[1][1][1]$a$218 = $memory\FIRQ_REGS$rdmux[1][2][2]$b$228'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[1][1][1]$217' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[1][0][0]$b$213 = $memory\FIRQ_REGS$rdmux[1][1][1]$a$218'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[1][0][0]$211' (0) in module `\NRISC_REGs' with constant driver `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$26_DATA = $memory\FIRQ_REGS$rdmux[1][0][0]$a$212'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[0][2][3]$208' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[0][1][1]$b$198 = $memory\FIRQ_REGS$rdmux[0][2][3]$a$209'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$358' in module `NRISC_REGs' with inverter.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[0][2][1]$202' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[0][1][0]$b$195 = $memory\FIRQ_REGS$rdmux[0][2][1]$a$203'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[7][2][3]$355' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[7][1][1]$b$345 = $memory\FIRQ_REGS$rdmux[7][2][3]$b$357'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[0][2][2]$205' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[0][1][1]$a$197 = $memory\FIRQ_REGS$rdmux[0][2][2]$a$206'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[0][1][1]$196' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[0][0][0]$b$192 = $memory\FIRQ_REGS$rdmux[0][1][1]$a$197'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[0][2][0]$199' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[0][1][0]$a$194 = $memory\FIRQ_REGS$rdmux[0][2][0]$a$200'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[0][1][0]$193' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[0][0][0]$a$191 = $memory\FIRQ_REGS$rdmux[0][1][0]$a$194'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[0][0][0]$190' (0) in module `\NRISC_REGs' with constant driver `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$23_DATA = $memory\FIRQ_REGS$rdmux[0][0][0]$a$191'.
Replacing $mux cell `$memory\USR_REGS$rdmux[0][2][0]$451' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[0][1][0]$a$446 = $memory\USR_REGS$rdmux[0][2][0]$a$452'.
Replacing $mux cell `$memory\USR_REGS$rdmux[0][2][1]$454' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[0][1][0]$b$447 = $memory\USR_REGS$rdmux[0][2][1]$a$455'.
Replacing $mux cell `$memory\USR_REGS$rdmux[0][1][0]$445' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[0][0][0]$a$443 = $memory\USR_REGS$rdmux[0][1][0]$a$446'.
Replacing $mux cell `$memory\USR_REGS$rdmux[0][2][2]$457' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[0][1][1]$a$449 = $memory\USR_REGS$rdmux[0][2][2]$a$458'.
Replacing $mux cell `$memory\USR_REGS$rdmux[0][2][3]$460' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[0][1][1]$b$450 = $memory\USR_REGS$rdmux[0][2][3]$a$461'.
Replacing $mux cell `$memory\USR_REGS$rdmux[0][1][1]$448' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[0][0][0]$b$444 = $memory\USR_REGS$rdmux[0][1][1]$a$449'.
Replacing $mux cell `$memory\USR_REGS$rdmux[0][0][0]$442' (0) in module `\NRISC_REGs' with constant driver `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$24_DATA = $memory\USR_REGS$rdmux[0][0][0]$a$443'.
Replacing $mux cell `$memory\USR_REGS$rdmux[1][2][0]$472' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[1][1][0]$a$467 = $memory\USR_REGS$rdmux[1][2][0]$b$474'.
Replacing $mux cell `$memory\USR_REGS$rdmux[1][2][1]$475' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[1][1][0]$b$468 = $memory\USR_REGS$rdmux[1][2][1]$b$477'.
Replacing $mux cell `$memory\USR_REGS$rdmux[1][1][0]$466' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[1][0][0]$a$464 = $memory\USR_REGS$rdmux[1][1][0]$a$467'.
Replacing $mux cell `$memory\USR_REGS$rdmux[1][2][2]$478' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[1][1][1]$a$470 = $memory\USR_REGS$rdmux[1][2][2]$b$480'.
Replacing $mux cell `$memory\USR_REGS$rdmux[1][2][3]$481' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[1][1][1]$b$471 = $memory\USR_REGS$rdmux[1][2][3]$b$483'.
Replacing $mux cell `$memory\USR_REGS$rdmux[1][1][1]$469' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[1][0][0]$b$465 = $memory\USR_REGS$rdmux[1][1][1]$a$470'.
Replacing $mux cell `$memory\USR_REGS$rdmux[1][0][0]$463' (0) in module `\NRISC_REGs' with constant driver `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$27_DATA = $memory\USR_REGS$rdmux[1][0][0]$a$464'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[2][2][2]$247' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[2][1][1]$a$239 = $memory\FIRQ_REGS$rdmux[2][2][2]$a$248'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[2][2][3]$250' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[2][1][1]$b$240 = $memory\FIRQ_REGS$rdmux[2][2][3]$a$251'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[2][1][1]$238' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[2][0][0]$b$234 = $memory\FIRQ_REGS$rdmux[2][1][1]$b$240'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[2][2][0]$241' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[2][1][0]$a$236 = $memory\FIRQ_REGS$rdmux[2][2][0]$a$242'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[2][2][1]$244' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[2][1][0]$b$237 = $memory\FIRQ_REGS$rdmux[2][2][1]$a$245'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[2][1][0]$235' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[2][0][0]$a$233 = $memory\FIRQ_REGS$rdmux[2][1][0]$b$237'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[2][0][0]$232' (0) in module `\NRISC_REGs' with constant driver `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$29_DATA = $memory\FIRQ_REGS$rdmux[2][0][0]$a$233'.
Replacing $mux cell `$memory\USR_REGS$rdmux[2][2][0]$493' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[2][1][0]$a$488 = $memory\USR_REGS$rdmux[2][2][0]$a$494'.
Replacing $mux cell `$memory\USR_REGS$rdmux[2][2][1]$496' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[2][1][0]$b$489 = $memory\USR_REGS$rdmux[2][2][1]$a$497'.
Replacing $mux cell `$memory\USR_REGS$rdmux[2][1][0]$487' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[2][0][0]$a$485 = $memory\USR_REGS$rdmux[2][1][0]$b$489'.
Replacing $mux cell `$memory\USR_REGS$rdmux[2][2][2]$499' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[2][1][1]$a$491 = $memory\USR_REGS$rdmux[2][2][2]$a$500'.
Replacing $mux cell `$memory\USR_REGS$rdmux[2][2][3]$502' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[2][1][1]$b$492 = $memory\USR_REGS$rdmux[2][2][3]$a$503'.
Replacing $mux cell `$memory\USR_REGS$rdmux[2][1][1]$490' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[2][0][0]$b$486 = $memory\USR_REGS$rdmux[2][1][1]$b$492'.
Replacing $mux cell `$memory\USR_REGS$rdmux[2][0][0]$484' (0) in module `\NRISC_REGs' with constant driver `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$30_DATA = $memory\USR_REGS$rdmux[2][0][0]$a$485'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[7][2][2]$352' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[7][1][1]$a$344 = $memory\FIRQ_REGS$rdmux[7][2][2]$b$354'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[3][2][1]$265' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[3][1][0]$b$258 = $memory\FIRQ_REGS$rdmux[3][2][1]$b$267'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[3][2][0]$262' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[3][1][0]$a$257 = $memory\FIRQ_REGS$rdmux[3][2][0]$b$264'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[3][1][0]$256' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[3][0][0]$a$254 = $memory\FIRQ_REGS$rdmux[3][1][0]$b$258'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[3][2][2]$268' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[3][1][1]$a$260 = $memory\FIRQ_REGS$rdmux[3][2][2]$b$270'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[3][2][3]$271' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[3][1][1]$b$261 = $memory\FIRQ_REGS$rdmux[3][2][3]$b$273'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[3][1][1]$259' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[3][0][0]$b$255 = $memory\FIRQ_REGS$rdmux[3][1][1]$b$261'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[3][0][0]$253' (0) in module `\NRISC_REGs' with constant driver `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$32_DATA = $memory\FIRQ_REGS$rdmux[3][0][0]$a$254'.
Replacing $mux cell `$memory\USR_REGS$rdmux[3][2][0]$514' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[3][1][0]$a$509 = $memory\USR_REGS$rdmux[3][2][0]$b$516'.
Replacing $mux cell `$memory\USR_REGS$rdmux[3][2][1]$517' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[3][1][0]$b$510 = $memory\USR_REGS$rdmux[3][2][1]$b$519'.
Replacing $mux cell `$memory\USR_REGS$rdmux[3][1][0]$508' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[3][0][0]$a$506 = $memory\USR_REGS$rdmux[3][1][0]$b$510'.
Replacing $mux cell `$memory\USR_REGS$rdmux[3][2][2]$520' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[3][1][1]$a$512 = $memory\USR_REGS$rdmux[3][2][2]$b$522'.
Replacing $mux cell `$memory\USR_REGS$rdmux[3][2][3]$523' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[3][1][1]$b$513 = $memory\USR_REGS$rdmux[3][2][3]$b$525'.
Replacing $mux cell `$memory\USR_REGS$rdmux[3][1][1]$511' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[3][0][0]$b$507 = $memory\USR_REGS$rdmux[3][1][1]$b$513'.
Replacing $mux cell `$memory\USR_REGS$rdmux[3][0][0]$505' (0) in module `\NRISC_REGs' with constant driver `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$33_DATA = $memory\USR_REGS$rdmux[3][0][0]$a$506'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[4][2][3]$292' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[4][1][1]$b$282 = $memory\FIRQ_REGS$rdmux[4][2][3]$a$293'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[4][2][2]$289' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[4][1][1]$a$281 = $memory\FIRQ_REGS$rdmux[4][2][2]$a$290'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[4][1][1]$280' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[4][0][0]$b$276 = $memory\FIRQ_REGS$rdmux[4][1][1]$a$281'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[4][2][1]$286' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[4][1][0]$b$279 = $memory\FIRQ_REGS$rdmux[4][2][1]$a$287'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[4][2][0]$283' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[4][1][0]$a$278 = $memory\FIRQ_REGS$rdmux[4][2][0]$a$284'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[4][1][0]$277' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[4][0][0]$a$275 = $memory\FIRQ_REGS$rdmux[4][1][0]$a$278'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[4][0][0]$274' (1) in module `\NRISC_REGs' with constant driver `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$35_DATA = $memory\FIRQ_REGS$rdmux[4][0][0]$b$276'.
Replacing $mux cell `$memory\USR_REGS$rdmux[4][2][0]$535' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[4][1][0]$a$530 = $memory\USR_REGS$rdmux[4][2][0]$a$536'.
Replacing $mux cell `$memory\USR_REGS$rdmux[4][2][1]$538' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[4][1][0]$b$531 = $memory\USR_REGS$rdmux[4][2][1]$a$539'.
Replacing $mux cell `$memory\USR_REGS$rdmux[4][1][0]$529' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[4][0][0]$a$527 = $memory\USR_REGS$rdmux[4][1][0]$a$530'.
Replacing $mux cell `$memory\USR_REGS$rdmux[4][2][2]$541' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[4][1][1]$a$533 = $memory\USR_REGS$rdmux[4][2][2]$a$542'.
Replacing $mux cell `$memory\USR_REGS$rdmux[4][2][3]$544' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[4][1][1]$b$534 = $memory\USR_REGS$rdmux[4][2][3]$a$545'.
Replacing $mux cell `$memory\USR_REGS$rdmux[4][1][1]$532' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[4][0][0]$b$528 = $memory\USR_REGS$rdmux[4][1][1]$a$533'.
Replacing $mux cell `$memory\USR_REGS$rdmux[4][0][0]$526' (1) in module `\NRISC_REGs' with constant driver `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$36_DATA = $memory\USR_REGS$rdmux[4][0][0]$b$528'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[5][2][3]$313' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[5][1][1]$b$303 = $memory\FIRQ_REGS$rdmux[5][2][3]$b$315'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[5][2][2]$310' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[5][1][1]$a$302 = $memory\FIRQ_REGS$rdmux[5][2][2]$b$312'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[5][1][1]$301' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[5][0][0]$b$297 = $memory\FIRQ_REGS$rdmux[5][1][1]$a$302'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[5][2][1]$307' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[5][1][0]$b$300 = $memory\FIRQ_REGS$rdmux[5][2][1]$b$309'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[5][2][0]$304' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[5][1][0]$a$299 = $memory\FIRQ_REGS$rdmux[5][2][0]$b$306'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[5][1][0]$298' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[5][0][0]$a$296 = $memory\FIRQ_REGS$rdmux[5][1][0]$a$299'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[5][0][0]$295' (1) in module `\NRISC_REGs' with constant driver `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$38_DATA = $memory\FIRQ_REGS$rdmux[5][0][0]$b$297'.
Replacing $mux cell `$memory\USR_REGS$rdmux[5][2][0]$556' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[5][1][0]$a$551 = $memory\USR_REGS$rdmux[5][2][0]$b$558'.
Replacing $mux cell `$memory\USR_REGS$rdmux[5][2][1]$559' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[5][1][0]$b$552 = $memory\USR_REGS$rdmux[5][2][1]$b$561'.
Replacing $mux cell `$memory\USR_REGS$rdmux[5][1][0]$550' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[5][0][0]$a$548 = $memory\USR_REGS$rdmux[5][1][0]$a$551'.
Replacing $mux cell `$memory\USR_REGS$rdmux[5][2][2]$562' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[5][1][1]$a$554 = $memory\USR_REGS$rdmux[5][2][2]$b$564'.
Replacing $mux cell `$memory\USR_REGS$rdmux[5][2][3]$565' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[5][1][1]$b$555 = $memory\USR_REGS$rdmux[5][2][3]$b$567'.
Replacing $mux cell `$memory\USR_REGS$rdmux[5][1][1]$553' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[5][0][0]$b$549 = $memory\USR_REGS$rdmux[5][1][1]$a$554'.
Replacing $mux cell `$memory\USR_REGS$rdmux[5][0][0]$547' (1) in module `\NRISC_REGs' with constant driver `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$39_DATA = $memory\USR_REGS$rdmux[5][0][0]$b$549'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[7][2][1]$349' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[7][1][0]$b$342 = $memory\FIRQ_REGS$rdmux[7][2][1]$b$351'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[6][2][3]$334' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[6][1][1]$b$324 = $memory\FIRQ_REGS$rdmux[6][2][3]$a$335'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[6][2][2]$331' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[6][1][1]$a$323 = $memory\FIRQ_REGS$rdmux[6][2][2]$a$332'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[6][1][1]$322' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[6][0][0]$b$318 = $memory\FIRQ_REGS$rdmux[6][1][1]$b$324'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[6][2][1]$328' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[6][1][0]$b$321 = $memory\FIRQ_REGS$rdmux[6][2][1]$a$329'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[6][2][0]$325' (0) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[6][1][0]$a$320 = $memory\FIRQ_REGS$rdmux[6][2][0]$a$326'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[6][1][0]$319' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[6][0][0]$a$317 = $memory\FIRQ_REGS$rdmux[6][1][0]$b$321'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[6][0][0]$316' (1) in module `\NRISC_REGs' with constant driver `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$41_DATA = $memory\FIRQ_REGS$rdmux[6][0][0]$b$318'.
Replacing $mux cell `$memory\USR_REGS$rdmux[6][2][0]$577' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[6][1][0]$a$572 = $memory\USR_REGS$rdmux[6][2][0]$a$578'.
Replacing $mux cell `$memory\USR_REGS$rdmux[6][2][1]$580' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[6][1][0]$b$573 = $memory\USR_REGS$rdmux[6][2][1]$a$581'.
Replacing $mux cell `$memory\USR_REGS$rdmux[6][1][0]$571' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[6][0][0]$a$569 = $memory\USR_REGS$rdmux[6][1][0]$b$573'.
Replacing $mux cell `$memory\USR_REGS$rdmux[6][2][2]$583' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[6][1][1]$a$575 = $memory\USR_REGS$rdmux[6][2][2]$a$584'.
Replacing $mux cell `$memory\USR_REGS$rdmux[6][2][3]$586' (0) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[6][1][1]$b$576 = $memory\USR_REGS$rdmux[6][2][3]$a$587'.
Replacing $mux cell `$memory\USR_REGS$rdmux[6][1][1]$574' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[6][0][0]$b$570 = $memory\USR_REGS$rdmux[6][1][1]$b$576'.
Replacing $mux cell `$memory\USR_REGS$rdmux[6][0][0]$568' (1) in module `\NRISC_REGs' with constant driver `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$42_DATA = $memory\USR_REGS$rdmux[6][0][0]$b$570'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[7][1][1]$343' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[7][0][0]$b$339 = $memory\FIRQ_REGS$rdmux[7][1][1]$b$345'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[7][2][0]$346' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[7][1][0]$a$341 = $memory\FIRQ_REGS$rdmux[7][2][0]$b$348'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[7][1][0]$340' (1) in module `\NRISC_REGs' with constant driver `$memory\FIRQ_REGS$rdmux[7][0][0]$a$338 = $memory\FIRQ_REGS$rdmux[7][1][0]$b$342'.
Replacing $mux cell `$memory\FIRQ_REGS$rdmux[7][0][0]$337' (1) in module `\NRISC_REGs' with constant driver `$memrd$\FIRQ_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$44_DATA = $memory\FIRQ_REGS$rdmux[7][0][0]$b$339'.
Replacing $mux cell `$memory\USR_REGS$rdmux[7][2][0]$598' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[7][1][0]$a$593 = $memory\USR_REGS$rdmux[7][2][0]$b$600'.
Replacing $mux cell `$memory\USR_REGS$rdmux[7][2][1]$601' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[7][1][0]$b$594 = $memory\USR_REGS$rdmux[7][2][1]$b$603'.
Replacing $mux cell `$memory\USR_REGS$rdmux[7][1][0]$592' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[7][0][0]$a$590 = $memory\USR_REGS$rdmux[7][1][0]$b$594'.
Replacing $mux cell `$memory\USR_REGS$rdmux[7][2][2]$604' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[7][1][1]$a$596 = $memory\USR_REGS$rdmux[7][2][2]$b$606'.
Replacing $mux cell `$memory\USR_REGS$rdmux[7][2][3]$607' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[7][1][1]$b$597 = $memory\USR_REGS$rdmux[7][2][3]$b$609'.
Replacing $mux cell `$memory\USR_REGS$rdmux[7][1][1]$595' (1) in module `\NRISC_REGs' with constant driver `$memory\USR_REGS$rdmux[7][0][0]$b$591 = $memory\USR_REGS$rdmux[7][1][1]$b$597'.
Replacing $mux cell `$memory\USR_REGS$rdmux[7][0][0]$589' (1) in module `\NRISC_REGs' with constant driver `$memrd$\USR_REGS$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$45_DATA = $memory\USR_REGS$rdmux[7][0][0]$b$591'.
Replacing $sub cell `$auto$memory_map.cc:196:handle_cell$654' (3'010, 3'010) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1648:Sub$655 = 3'000'.
Replacing $mux cell `$memory\global_REGS$rdmux[0][2][0]$665' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[0][1][0]$a$660 = $memory\global_REGS$rdmux[0][2][0]$a$666'.
Replacing $mux cell `$memory\global_REGS$rdmux[0][2][1]$668' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[0][1][0]$b$661 = $memory\global_REGS$rdmux[0][2][1]$a$669'.
Replacing $mux cell `$memory\global_REGS$rdmux[0][1][0]$659' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[0][0][0]$a$657 = $memory\global_REGS$rdmux[0][1][0]$a$660'.
Replacing $mux cell `$memory\global_REGS$rdmux[0][2][2]$671' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[0][1][1]$a$663 = $memory\global_REGS$rdmux[0][2][2]$a$672'.
Replacing $mux cell `$memory\global_REGS$rdmux[0][2][3]$674' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[0][1][1]$b$664 = $memory\global_REGS$rdmux[0][2][3]$a$675'.
Replacing $mux cell `$memory\global_REGS$rdmux[0][1][1]$662' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[0][0][0]$b$658 = $memory\global_REGS$rdmux[0][1][1]$a$663'.
Replacing $mux cell `$memory\global_REGS$rdmux[0][0][0]$656' (0) in module `\NRISC_REGs' with constant driver `\REGS[2] = $memory\global_REGS$rdmux[0][0][0]$a$657'.
Replacing $sub cell `$auto$memory_map.cc:196:handle_cell$677' (3'011, 3'010) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1648:Sub$678 = 3'001'.
Replacing $mux cell `$memory\global_REGS$rdmux[1][2][0]$688' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[1][1][0]$a$683 = $memory\global_REGS$rdmux[1][2][0]$b$690'.
Replacing $mux cell `$memory\global_REGS$rdmux[1][2][1]$691' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[1][1][0]$b$684 = $memory\global_REGS$rdmux[1][2][1]$b$693'.
Replacing $mux cell `$memory\global_REGS$rdmux[1][1][0]$682' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[1][0][0]$a$680 = $memory\global_REGS$rdmux[1][1][0]$a$683'.
Replacing $mux cell `$memory\global_REGS$rdmux[1][2][2]$694' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[1][1][1]$a$686 = $memory\global_REGS$rdmux[1][2][2]$b$696'.
Replacing $mux cell `$memory\global_REGS$rdmux[1][2][3]$697' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[1][1][1]$b$687 = $memory\global_REGS$rdmux[1][2][3]$b$699'.
Replacing $mux cell `$memory\global_REGS$rdmux[1][1][1]$685' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[1][0][0]$b$681 = $memory\global_REGS$rdmux[1][1][1]$a$686'.
Replacing $mux cell `$memory\global_REGS$rdmux[1][0][0]$679' (0) in module `\NRISC_REGs' with constant driver `\REGS[3] = $memory\global_REGS$rdmux[1][0][0]$a$680'.
Replacing $sub cell `$auto$memory_map.cc:196:handle_cell$700' (3'100, 3'010) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1648:Sub$701 = 3'010'.
Replacing $mux cell `$memory\global_REGS$rdmux[2][2][0]$711' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[2][1][0]$a$706 = $memory\global_REGS$rdmux[2][2][0]$a$712'.
Replacing $mux cell `$memory\global_REGS$rdmux[2][2][1]$714' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[2][1][0]$b$707 = $memory\global_REGS$rdmux[2][2][1]$a$715'.
Replacing $mux cell `$memory\global_REGS$rdmux[2][1][0]$705' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[2][0][0]$a$703 = $memory\global_REGS$rdmux[2][1][0]$b$707'.
Replacing $mux cell `$memory\global_REGS$rdmux[2][2][2]$717' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[2][1][1]$a$709 = $memory\global_REGS$rdmux[2][2][2]$a$718'.
Replacing $mux cell `$memory\global_REGS$rdmux[2][2][3]$720' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[2][1][1]$b$710 = $memory\global_REGS$rdmux[2][2][3]$a$721'.
Replacing $mux cell `$memory\global_REGS$rdmux[2][1][1]$708' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[2][0][0]$b$704 = $memory\global_REGS$rdmux[2][1][1]$b$710'.
Replacing $mux cell `$memory\global_REGS$rdmux[2][0][0]$702' (0) in module `\NRISC_REGs' with constant driver `\REGS[4] = $memory\global_REGS$rdmux[2][0][0]$a$703'.
Replacing $sub cell `$auto$memory_map.cc:196:handle_cell$723' (3'101, 3'010) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1648:Sub$724 = 3'011'.
Replacing $mux cell `$memory\global_REGS$rdmux[3][2][0]$734' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[3][1][0]$a$729 = $memory\global_REGS$rdmux[3][2][0]$b$736'.
Replacing $mux cell `$memory\global_REGS$rdmux[3][2][1]$737' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[3][1][0]$b$730 = $memory\global_REGS$rdmux[3][2][1]$b$739'.
Replacing $mux cell `$memory\global_REGS$rdmux[3][1][0]$728' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[3][0][0]$a$726 = $memory\global_REGS$rdmux[3][1][0]$b$730'.
Replacing $mux cell `$memory\global_REGS$rdmux[3][2][2]$740' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[3][1][1]$a$732 = $memory\global_REGS$rdmux[3][2][2]$b$742'.
Replacing $mux cell `$memory\global_REGS$rdmux[3][2][3]$743' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[3][1][1]$b$733 = $memory\global_REGS$rdmux[3][2][3]$b$745'.
Replacing $mux cell `$memory\global_REGS$rdmux[3][1][1]$731' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[3][0][0]$b$727 = $memory\global_REGS$rdmux[3][1][1]$b$733'.
Replacing $mux cell `$memory\global_REGS$rdmux[3][0][0]$725' (0) in module `\NRISC_REGs' with constant driver `\REGS[5] = $memory\global_REGS$rdmux[3][0][0]$a$726'.
Replacing $sub cell `$auto$memory_map.cc:196:handle_cell$746' (3'110, 3'010) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1648:Sub$747 = 3'100'.
Replacing $mux cell `$memory\global_REGS$rdmux[4][2][0]$757' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[4][1][0]$a$752 = $memory\global_REGS$rdmux[4][2][0]$a$758'.
Replacing $mux cell `$memory\global_REGS$rdmux[4][2][1]$760' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[4][1][0]$b$753 = $memory\global_REGS$rdmux[4][2][1]$a$761'.
Replacing $mux cell `$memory\global_REGS$rdmux[4][1][0]$751' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[4][0][0]$a$749 = $memory\global_REGS$rdmux[4][1][0]$a$752'.
Replacing $mux cell `$memory\global_REGS$rdmux[4][2][2]$763' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[4][1][1]$a$755 = $memory\global_REGS$rdmux[4][2][2]$a$764'.
Replacing $mux cell `$memory\global_REGS$rdmux[4][2][3]$766' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[4][1][1]$b$756 = $memory\global_REGS$rdmux[4][2][3]$a$767'.
Replacing $mux cell `$memory\global_REGS$rdmux[4][1][1]$754' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[4][0][0]$b$750 = $memory\global_REGS$rdmux[4][1][1]$a$755'.
Replacing $mux cell `$memory\global_REGS$rdmux[4][0][0]$748' (1) in module `\NRISC_REGs' with constant driver `\REGS[6] = $memory\global_REGS$rdmux[4][0][0]$b$750'.
Replacing $sub cell `$auto$memory_map.cc:196:handle_cell$769' (3'111, 3'010) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1648:Sub$770 = 3'101'.
Replacing $mux cell `$memory\global_REGS$rdmux[5][2][0]$780' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[5][1][0]$a$775 = $memory\global_REGS$rdmux[5][2][0]$b$782'.
Replacing $mux cell `$memory\global_REGS$rdmux[5][2][1]$783' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[5][1][0]$b$776 = $memory\global_REGS$rdmux[5][2][1]$b$785'.
Replacing $mux cell `$memory\global_REGS$rdmux[5][1][0]$774' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[5][0][0]$a$772 = $memory\global_REGS$rdmux[5][1][0]$a$775'.
Replacing $mux cell `$memory\global_REGS$rdmux[5][2][2]$786' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[5][1][1]$a$778 = $memory\global_REGS$rdmux[5][2][2]$b$788'.
Replacing $mux cell `$memory\global_REGS$rdmux[5][2][3]$789' (1) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[5][1][1]$b$779 = $memory\global_REGS$rdmux[5][2][3]$b$791'.
Replacing $mux cell `$memory\global_REGS$rdmux[5][1][1]$777' (0) in module `\NRISC_REGs' with constant driver `$memory\global_REGS$rdmux[5][0][0]$b$773 = $memory\global_REGS$rdmux[5][1][1]$a$778'.
Replacing $mux cell `$memory\global_REGS$rdmux[5][0][0]$771' (1) in module `\NRISC_REGs' with constant driver `\REGS[7] = $memory\global_REGS$rdmux[5][0][0]$b$773'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$396' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$397 = \REG_RFD [2]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$794' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$796' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$798' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$810' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$811 = $auto$rtlil.cc:1648:Sub$809 [0]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$812' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$814' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$826' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$828' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$829 = $auto$rtlil.cc:1648:Sub$825 [1]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$830' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$842' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$843 = $auto$rtlil.cc:1648:Sub$841 [0]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$844' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$845 = $auto$rtlil.cc:1648:Sub$841 [1]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$846' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$858' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$860' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$862' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$863 = $auto$rtlil.cc:1648:Sub$857 [2]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$874' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$875 = $auto$rtlil.cc:1648:Sub$873 [0]'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$876' in module `NRISC_REGs' with inverter.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$878' (1) in module `\NRISC_REGs' with constant driver `$auto$rtlil.cc:1641:Eq$879 = $auto$rtlil.cc:1648:Sub$873 [2]'.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:285:handle_cell$792' is identical to cell `$auto$memory_map.cc:285:handle_cell$808'.
    Redirecting output \Y: $auto$rtlil.cc:1648:Sub$793 = $auto$rtlil.cc:1648:Sub$809
    Removing $sub cell `$auto$memory_map.cc:285:handle_cell$792' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:285:handle_cell$824' is identical to cell `$auto$memory_map.cc:285:handle_cell$808'.
    Redirecting output \Y: $auto$rtlil.cc:1648:Sub$825 = $auto$rtlil.cc:1648:Sub$809
    Removing $sub cell `$auto$memory_map.cc:285:handle_cell$824' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:65:addr_decode$812' is identical to cell `$auto$memory_map.cc:65:addr_decode$796'.
    Redirecting output \Y: $auto$rtlil.cc:1641:Eq$813 = $auto$rtlil.cc:1641:Eq$797
    Removing $not cell `$auto$memory_map.cc:65:addr_decode$812' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:285:handle_cell$872' is identical to cell `$auto$memory_map.cc:285:handle_cell$808'.
    Redirecting output \Y: $auto$rtlil.cc:1648:Sub$873 = $auto$rtlil.cc:1648:Sub$809
    Removing $sub cell `$auto$memory_map.cc:285:handle_cell$872' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:285:handle_cell$840' is identical to cell `$auto$memory_map.cc:285:handle_cell$808'.
    Redirecting output \Y: $auto$rtlil.cc:1648:Sub$841 = $auto$rtlil.cc:1648:Sub$809
    Removing $sub cell `$auto$memory_map.cc:285:handle_cell$840' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:65:addr_decode$876' is identical to cell `$auto$memory_map.cc:65:addr_decode$796'.
    Redirecting output \Y: $auto$rtlil.cc:1641:Eq$877 = $auto$rtlil.cc:1641:Eq$797
    Removing $not cell `$auto$memory_map.cc:65:addr_decode$876' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:285:handle_cell$856' is identical to cell `$auto$memory_map.cc:285:handle_cell$808'.
    Redirecting output \Y: $auto$rtlil.cc:1648:Sub$857 = $auto$rtlil.cc:1648:Sub$809
    Removing $sub cell `$auto$memory_map.cc:285:handle_cell$856' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:65:addr_decode$794' is identical to cell `$auto$memory_map.cc:65:addr_decode$826'.
    Redirecting output \Y: $auto$rtlil.cc:1641:Eq$795 = $auto$rtlil.cc:1641:Eq$827
    Removing $not cell `$auto$memory_map.cc:65:addr_decode$794' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:65:addr_decode$846' is identical to cell `$auto$memory_map.cc:65:addr_decode$798'.
    Redirecting output \Y: $auto$rtlil.cc:1641:Eq$847 = $auto$rtlil.cc:1641:Eq$799
    Removing $not cell `$auto$memory_map.cc:65:addr_decode$846' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:65:addr_decode$830' is identical to cell `$auto$memory_map.cc:65:addr_decode$798'.
    Redirecting output \Y: $auto$rtlil.cc:1641:Eq$831 = $auto$rtlil.cc:1641:Eq$799
    Removing $not cell `$auto$memory_map.cc:65:addr_decode$830' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:65:addr_decode$814' is identical to cell `$auto$memory_map.cc:65:addr_decode$798'.
    Redirecting output \Y: $auto$rtlil.cc:1641:Eq$815 = $auto$rtlil.cc:1641:Eq$799
    Removing $not cell `$auto$memory_map.cc:65:addr_decode$814' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:70:addr_decode$816' is identical to cell `$auto$memory_map.cc:70:addr_decode$800'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$817 = $auto$rtlil.cc:1629:And$801
    Removing $and cell `$auto$memory_map.cc:70:addr_decode$816' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:65:addr_decode$860' is identical to cell `$auto$memory_map.cc:65:addr_decode$796'.
    Redirecting output \Y: $auto$rtlil.cc:1641:Eq$861 = $auto$rtlil.cc:1641:Eq$797
    Removing $not cell `$auto$memory_map.cc:65:addr_decode$860' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:70:addr_decode$864' is identical to cell `$auto$memory_map.cc:70:addr_decode$880'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$865 = $auto$rtlil.cc:1629:And$881
    Removing $and cell `$auto$memory_map.cc:70:addr_decode$864' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:65:addr_decode$858' is identical to cell `$auto$memory_map.cc:65:addr_decode$826'.
    Redirecting output \Y: $auto$rtlil.cc:1641:Eq$859 = $auto$rtlil.cc:1641:Eq$827
    Removing $not cell `$auto$memory_map.cc:65:addr_decode$858' from module `\NRISC_REGs'.
  Cell `$auto$memory_map.cc:70:addr_decode$832' is identical to cell `$auto$memory_map.cc:70:addr_decode$848'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$833 = $auto$rtlil.cc:1629:And$849
    Removing $and cell `$auto$memory_map.cc:70:addr_decode$832' from module `\NRISC_REGs'.
Removed a total of 16 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_REGs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $memory\FIRQ_REGS$wrmux[5][0][0]$410 (pure)
    Root of a mux tree: $memory\FIRQ_REGS$wrmux[4][0][0]$404 (pure)
    Root of a mux tree: $memory\FIRQ_REGS$wrmux[3][0][0]$394 (pure)
    Root of a mux tree: $memory\FIRQ_REGS$wrmux[2][0][0]$388 (pure)
    Root of a mux tree: $memory\FIRQ_REGS$wrmux[1][0][0]$378 (pure)
    Root of a mux tree: $memory\FIRQ_REGS$wrmux[0][0][0]$370 (pure)
    Root of a mux tree: $memory\USR_REGS$wrmux[3][0][0]$624 (pure)
    Root of a mux tree: $memory\USR_REGS$wrmux[5][0][0]$632 (pure)
    Root of a mux tree: $memory\USR_REGS$wrmux[4][0][0]$628 (pure)
    Root of a mux tree: $memory\USR_REGS$wrmux[2][0][0]$620 (pure)
    Root of a mux tree: $memory\USR_REGS$wrmux[1][0][0]$616 (pure)
    Root of a mux tree: $memory\USR_REGS$wrmux[0][0][0]$612 (pure)
    Root of a mux tree: $memory\USR_REGS$wrmux[6][0][0]$636 (pure)
    Root of a mux tree: $memory\global_REGS$wrmux[0][0][0]$806 (pure)
    Root of a mux tree: $memory\global_REGS$wrmux[2][0][0]$838 (pure)
    Root of a mux tree: $memory\global_REGS$wrmux[1][0][0]$822 (pure)
    Root of a mux tree: $memory\global_REGS$wrmux[4][0][0]$870 (pure)
    Root of a mux tree: $memory\FIRQ_REGS$wrmux[6][0][0]$418 (pure)
    Root of a mux tree: $memory\global_REGS$wrmux[3][0][0]$854 (pure)
    Root of a mux tree: $procmux$56 (pure)
    Root of a mux tree: $procmux$73 (pure)
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$25
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$28
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$31
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$34
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$37
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$40
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$43
    Root of a mux tree: $ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$46
    Root of a mux tree: $memory\FIRQ_REGS$wrmux[7][0][0]$424 (pure)
    Root of a mux tree: $memory\USR_REGS$wrmux[7][0][0]$640 (pure)
    Root of a mux tree: $memory\global_REGS$wrmux[5][0][0]$886 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_REGs.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping NRISC_REGs.$memory\global_REGS[0]$642 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS[0]$426 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wrmux[1][0][0]$378 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wren[1][0][0]$376 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$384 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$374 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wrmux[0][0][0]$370 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wren[0][0][0]$368 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$366 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$364 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:65:addr_decode$362 ($not) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:65:addr_decode$360 ($not) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS[4]$182 ($dff) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:65:addr_decode$358 ($not) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS[3]$180 ($dff) with simplemap.
Mapping NRISC_REGs.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:50$25 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS[7]$188 ($dff) with simplemap.
Mapping NRISC_REGs.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:51$28 ($mux) with simplemap.
Mapping NRISC_REGs.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:52$31 ($mux) with simplemap.
Mapping NRISC_REGs.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:53$34 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS[6]$186 ($dff) with simplemap.
Mapping NRISC_REGs.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:54$37 ($mux) with simplemap.
Mapping NRISC_REGs.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:55$40 ($mux) with simplemap.
Mapping NRISC_REGs.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:56$43 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS[5]$184 ($dff) with simplemap.
Mapping NRISC_REGs.$ternary$/home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.v:57$46 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wren[2][0][0]$386 ($and) with simplemap.
Mapping NRISC_REGs.$procmux$57_CMP0 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 16
Parameter \S_WIDTH = 15
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=16\S_WIDTH=15'.

3.18.3. Continuing TECHMAP pass.
Mapping NRISC_REGs.$procmux$56 using $paramod\_90_pmux\WIDTH=16\S_WIDTH=15.
Mapping NRISC_REGs.$procmux$58_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$59_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$60_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$61_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$62_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$63_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$64_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$65_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$66_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$67_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$68_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$69_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$70_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$71_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$74_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$73 using $paramod\_90_pmux\WIDTH=16\S_WIDTH=15.
Mapping NRISC_REGs.$procmux$75_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$76_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$77_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$78_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$79_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$80_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$81_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$82_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$83_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$84_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$85_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$86_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$87_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$88_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS[1]$176 ($dff) with simplemap.
Mapping NRISC_REGs.$procmux$95 ($and) with simplemap.
Mapping NRISC_REGs.$procmux$101_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$101_CMP1 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$101_CMP2 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$101_CMP3 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$101_CMP4 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$101_CMP5 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$101_ANY ($reduce_or) with simplemap.
Mapping NRISC_REGs.$procmux$114 ($not) with simplemap.
Mapping NRISC_REGs.$procmux$117_CMP0 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$117_CMP1 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$117_CMP2 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$117_CMP3 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$117_CMP4 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$117_CMP5 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$117_CMP6 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$117_CMP7 ($eq) with simplemap.
Mapping NRISC_REGs.$procmux$117_ANY ($reduce_or) with simplemap.
Mapping NRISC_REGs.$procmux$116 ($and) with simplemap.
Mapping NRISC_REGs.$procmux$118 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$382 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS[0]$174 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS[2]$178 ($dff) with simplemap.
Mapping NRISC_REGs.$procmux$142 ($and) with simplemap.
Mapping NRISC_REGs.$procmux$144 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wrmux[2][0][0]$388 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$390 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wren[3][0][0]$392 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wrmux[3][0][0]$394 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$398 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$400 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wren[4][0][0]$402 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wrmux[4][0][0]$404 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$406 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wren[5][0][0]$408 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wrmux[5][0][0]$410 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$412 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$414 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wren[6][0][0]$416 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wrmux[6][0][0]$418 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$420 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wren[7][0][0]$422 ($and) with simplemap.
Mapping NRISC_REGs.$memory\FIRQ_REGS$wrmux[7][0][0]$424 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS[1]$428 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS[2]$430 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS[3]$432 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS[4]$434 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS[5]$436 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS[6]$438 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS[7]$440 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wren[0][0][0]$610 ($and) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wrmux[0][0][0]$612 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wren[1][0][0]$614 ($and) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wrmux[1][0][0]$616 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wren[2][0][0]$618 ($and) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wrmux[2][0][0]$620 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wren[3][0][0]$622 ($and) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wrmux[3][0][0]$624 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wren[4][0][0]$626 ($and) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wrmux[4][0][0]$628 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wren[5][0][0]$630 ($and) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wrmux[5][0][0]$632 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wren[6][0][0]$634 ($and) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wrmux[6][0][0]$636 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wren[7][0][0]$638 ($and) with simplemap.
Mapping NRISC_REGs.$memory\USR_REGS$wrmux[7][0][0]$640 ($mux) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS[1]$644 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS[2]$646 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS[3]$648 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS[4]$650 ($dff) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS[5]$652 ($dff) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:65:addr_decode$796 ($not) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:65:addr_decode$798 ($not) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$800 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$802 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wren[0][0][0]$804 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wrmux[0][0][0]$806 ($mux) with simplemap.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.

3.18.4. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47:
  creating $macc model for $sub ($sub).
  creating $alu model for $macc $sub.
  creating $alu cell for $sub: $auto$alumacc.cc:470:replace_alu$2437
  created 1 $alu and 0 $macc cells.

3.18.5. Continuing TECHMAP pass.
Mapping NRISC_REGs.$auto$memory_map.cc:285:handle_cell$808 using $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=3:394426c56d1a028ba8fdd5469b163e04011def47.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$818 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wren[1][0][0]$820 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wrmux[1][0][0]$822 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:65:addr_decode$826 ($not) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$834 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wren[2][0][0]$836 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wrmux[2][0][0]$838 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$848 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$850 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wren[3][0][0]$852 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wrmux[3][0][0]$854 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$866 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wren[4][0][0]$868 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wrmux[4][0][0]$870 ($mux) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$880 ($and) with simplemap.
Mapping NRISC_REGs.$auto$memory_map.cc:70:addr_decode$882 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wren[5][0][0]$884 ($and) with simplemap.
Mapping NRISC_REGs.$memory\global_REGS$wrmux[5][0][0]$886 ($mux) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1260 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1261 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1259 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1258 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1257 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1256 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1255 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1254 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1253 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1252 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1251 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1250 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1249 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1248 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1247 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:441$1246 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1245 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1244 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1243 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1242 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1241 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1240 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1239 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1238 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1237 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1236 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1235 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1234 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1233 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1232 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$and$<techmap.v>:434$1231 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$ternary$<techmap.v>:445$1230 ($mux) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$56.$reduce_or$<techmap.v>:445$1229 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1260 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1261 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1259 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1258 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1257 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1256 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1255 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1254 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1253 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1252 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1251 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1250 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1249 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1248 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1247 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:441$1246 ($reduce_or) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1245 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1244 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1243 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1242 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1241 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1240 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1239 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1238 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1237 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1236 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1235 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1234 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1233 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1232 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$and$<techmap.v>:434$1231 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$ternary$<techmap.v>:445$1230 ($mux) with simplemap.
Mapping NRISC_REGs.$techmap$procmux$73.$reduce_or$<techmap.v>:445$1229 ($reduce_or) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 3
Parameter \B_WIDTH = 3
Parameter \Y_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3'.

3.18.7. Continuing TECHMAP pass.
Mapping NRISC_REGs.$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$xor$<techmap.v>:262$3660 ($xor) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$xor$<techmap.v>:263$3661 ($xor) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$and$<techmap.v>:260$3659 ($and) with simplemap.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=3'.

3.18.9. Executing PROC pass (convert processes to netlists).

3.18.9.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.9.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.9.3. Executing PROC_INIT pass (extract init attributes).

3.18.9.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.9.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=3.$proc$<techmap.v>:207$3678'.
     1/6: $0\p[2:0] [2]
     2/6: $0\g[2:0] [2]
     3/6: $0\p[2:0] [1]
     4/6: $0\g[2:0] [1]
     5/6: $0\g[2:0] [0]
     6/6: $0\p[2:0] [0]

3.18.9.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=3.\g' from process `$paramod\_90_lcu\WIDTH=3.$proc$<techmap.v>:207$3678'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=3.\p' from process `$paramod\_90_lcu\WIDTH=3.$proc$<techmap.v>:207$3678'.

3.18.9.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.9.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=3.$proc$<techmap.v>:207$3678'.
Cleaned up 0 empty switches.

3.18.10. Executing OPT pass (performing simple optimizations).

3.18.10.1. Executing OPT_EXPR pass (perform const folding).

3.18.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=3'.
Removed a total of 0 cells.

3.18.10.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=3..
  removing unused `$and' cell `$and$<techmap.v>:222$3683'.
  removing unused `$and' cell `$and$<techmap.v>:230$3686'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.10.5. Finished fast OPT passes.

3.18.11. Continuing TECHMAP pass.
Mapping NRISC_REGs.$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu using $paramod\_90_lcu\WIDTH=3.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$ternary$<techmap.v>:258$3658 ($mux) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$not$<techmap.v>:258$3657 ($not) with simplemap.
Mapping NRISC_REGs.$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.B_conv ($pos) with simplemap.
Mapping NRISC_REGs.$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.A_conv ($pos) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu.$or$<techmap.v>:229$3685 ($or) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu.$or$<techmap.v>:221$3682 ($or) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu.$or$<techmap.v>:212$3680 ($or) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu.$and$<techmap.v>:229$3684 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu.$and$<techmap.v>:221$3681 ($and) with simplemap.
Mapping NRISC_REGs.$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu.$and$<techmap.v>:212$3679 ($and) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$3690' (0) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$not$<techmap.v>:258$3657_Y [0] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3687' (011) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$ternary$<techmap.v>:258$3658_Y [0] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3698' (?1) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu.$and$<techmap.v>:212$3679_Y = $techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$xor$<techmap.v>:262$3660_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3669' (?1) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$and$<techmap.v>:260$3659_Y [0] = \REG_RFD [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$3691' (1) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$not$<techmap.v>:258$3657_Y [1] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3688' (101) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$ternary$<techmap.v>:258$3658_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3663' (?0) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$xor$<techmap.v>:262$3660_Y [1] = \REG_RFD [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1264' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1262 [0] = \REG_RF2 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1905' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1903 [0] = \REG_RFD [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1875' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1873 [0] = \REG_RFD [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1876' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1873 [1] = \REG_RFD [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1891' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1888 [1] = \REG_RFD [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1845' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1843 [0] = \REG_RFD [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1847' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1843 [2] = \REG_RFD [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1862' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1858 [2] = \REG_RFD [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1815' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1813 [0] = \REG_RFD [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1816' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1813 [1] = \REG_RFD [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1817' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1813 [2] = \REG_RFD [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1831' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1828 [1] = \REG_RFD [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1832' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1828 [2] = \REG_RFD [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1280' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1277 [1] = \REG_RF2 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1294' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1292 [0] = \REG_RF2 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1295' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1292 [1] = \REG_RF2 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1311' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1307 [2] = \REG_RF2 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1324' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1322 [0] = \REG_RF2 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1326' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1322 [2] = \REG_RF2 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1340' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1337 [1] = \REG_RF2 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1341' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1337 [2] = \REG_RF2 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1354' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1352 [0] = \REG_RF2 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1355' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1352 [1] = \REG_RF2 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1356' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1352 [2] = \REG_RF2 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1372' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1367 [3] = \REG_RF2 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1384' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1382 [0] = \REG_RF2 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1387' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1382 [3] = \REG_RF2 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1400' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1397 [1] = \REG_RF2 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1402' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1397 [3] = \REG_RF2 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1414' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1412 [0] = \REG_RF2 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1415' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1412 [1] = \REG_RF2 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1417' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1412 [3] = \REG_RF2 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1431' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1427 [2] = \REG_RF2 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1432' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1427 [3] = \REG_RF2 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1444' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1442 [0] = \REG_RF2 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1446' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1442 [2] = \REG_RF2 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1447' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1442 [3] = \REG_RF2 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1460' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [1] = \REG_RF2 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1461' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [2] = \REG_RF2 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1462' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1457 [3] = \REG_RF2 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1489' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1487 [0] = \REG_RF1 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3670' (const_and) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$and$<techmap.v>:260$3659_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3694' (0?) in module `\NRISC_REGs' with constant driver `$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:484:replace_alu$2439 [1] = $techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.lcu.$and$<techmap.v>:221$3681_Y'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$3692' (0) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$not$<techmap.v>:258$3657_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3689' (011) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$ternary$<techmap.v>:258$3658_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3671' (?1) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$and$<techmap.v>:260$3659_Y [2] = \REG_RFD [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1505' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1502 [1] = \REG_RF1 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1519' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1517 [0] = \REG_RF1 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1520' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1517 [1] = \REG_RF1 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1536' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1532 [2] = \REG_RF1 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1549' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1547 [0] = \REG_RF1 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1551' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1547 [2] = \REG_RF1 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1565' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1562 [1] = \REG_RF1 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1566' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1562 [2] = \REG_RF1 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1579' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1577 [0] = \REG_RF1 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1580' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1577 [1] = \REG_RF1 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1581' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1577 [2] = \REG_RF1 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1597' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1592 [3] = \REG_RF1 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1609' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1607 [0] = \REG_RF1 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1612' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1607 [3] = \REG_RF1 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1625' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1622 [1] = \REG_RF1 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1627' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1622 [3] = \REG_RF1 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1639' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1637 [0] = \REG_RF1 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1640' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1637 [1] = \REG_RF1 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1642' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1637 [3] = \REG_RF1 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1656' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1652 [2] = \REG_RF1 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1657' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1652 [3] = \REG_RF1 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1669' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1667 [0] = \REG_RF1 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1671' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1667 [2] = \REG_RF1 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1672' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1667 [3] = \REG_RF1 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1685' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1682 [1] = \REG_RF1 [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1686' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1682 [2] = \REG_RF1 [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1687' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1682 [3] = \REG_RF1 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1716' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1714 [0] = \REG_RFD [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1718' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1714 [2] = \REG_RFD [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1719' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1714 [3] = \REG_RFD [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1733' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1729 [2] = \REG_RFD [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1734' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1729 [3] = \REG_RFD [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1776' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1774 [0] = \REG_RFD [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1779' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1774 [3] = \REG_RFD [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1794' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1789 [3] = \REG_RFD [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1746' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1744 [0] = \REG_RFD [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1747' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1744 [1] = \REG_RFD [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1749' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1744 [3] = \REG_RFD [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1762' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1759 [1] = \REG_RFD [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1764' (?0) in module `\NRISC_REGs' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1759 [3] = \REG_RFD [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3668' (0?) in module `\NRISC_REGs' with constant driver `$techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$xor$<techmap.v>:263$3661_Y [3] = $techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:484:replace_alu$2439 [2]'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1907' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1922'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1903 [2] = $auto$simplemap.cc:250:simplemap_eqne$1918 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1907' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1906' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1921'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1903 [1] = $auto$simplemap.cc:250:simplemap_eqne$1918 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1906' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1908' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1923'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1903 [3] = $auto$simplemap.cc:250:simplemap_eqne$1918 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1908' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1892' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1922'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1888 [2] = $auto$simplemap.cc:250:simplemap_eqne$1918 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1892' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1890' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1920'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1888 [0] = $auto$simplemap.cc:250:simplemap_eqne$1918 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1890' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1893' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1923'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1888 [3] = $auto$simplemap.cc:250:simplemap_eqne$1918 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1893' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1877' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1922'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1873 [2] = $auto$simplemap.cc:250:simplemap_eqne$1918 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1877' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1878' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1923'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1873 [3] = $auto$simplemap.cc:250:simplemap_eqne$1918 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1878' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1861' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1921'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1858 [1] = $auto$simplemap.cc:250:simplemap_eqne$1918 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1861' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1860' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1920'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1858 [0] = $auto$simplemap.cc:250:simplemap_eqne$1918 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1860' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1863' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1923'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1858 [3] = $auto$simplemap.cc:250:simplemap_eqne$1918 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1863' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3662' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1920'.
    Redirecting output \Y: $techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$xor$<techmap.v>:262$3660_Y [0] = $auto$simplemap.cc:250:simplemap_eqne$1918 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3662' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1846' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1921'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1843 [1] = $auto$simplemap.cc:250:simplemap_eqne$1918 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1846' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1848' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1923'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1843 [3] = $auto$simplemap.cc:250:simplemap_eqne$1918 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1848' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$3664' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1922'.
    Redirecting output \Y: $techmap$techmap$auto$memory_map.cc:285:handle_cell$808.$auto$alumacc.cc:470:replace_alu$2437.$xor$<techmap.v>:262$3660_Y [2] = $auto$simplemap.cc:250:simplemap_eqne$1918 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3664' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1830' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1920'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1828 [0] = $auto$simplemap.cc:250:simplemap_eqne$1918 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1830' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1833' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1923'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1828 [3] = $auto$simplemap.cc:250:simplemap_eqne$1918 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1833' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1822' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1882'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1821 [0] = $auto$simplemap.cc:127:simplemap_reduce$1881 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1822' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1818' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1923'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1813 [3] = $auto$simplemap.cc:250:simplemap_eqne$1918 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1818' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1793' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1922'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1789 [2] = $auto$simplemap.cc:250:simplemap_eqne$1918 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1793' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1792' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1921'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1789 [1] = $auto$simplemap.cc:250:simplemap_eqne$1918 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1792' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1791' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1920'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1789 [0] = $auto$simplemap.cc:250:simplemap_eqne$1918 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1791' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1778' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1922'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1774 [2] = $auto$simplemap.cc:250:simplemap_eqne$1918 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1778' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1777' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1921'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1774 [1] = $auto$simplemap.cc:250:simplemap_eqne$1918 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1777' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1763' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1922'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1759 [2] = $auto$simplemap.cc:250:simplemap_eqne$1918 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1763' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1761' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1920'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1759 [0] = $auto$simplemap.cc:250:simplemap_eqne$1918 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1761' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1753' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1882'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1752 [0] = $auto$simplemap.cc:127:simplemap_reduce$1881 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1753' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1748' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1922'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1744 [2] = $auto$simplemap.cc:250:simplemap_eqne$1918 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1748' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1732' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1921'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1729 [1] = $auto$simplemap.cc:250:simplemap_eqne$1918 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1732' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1731' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1920'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1729 [0] = $auto$simplemap.cc:250:simplemap_eqne$1918 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1731' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1724' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1739'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1722 [1] = $auto$simplemap.cc:127:simplemap_reduce$1737 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1724' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1717' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1921'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1714 [1] = $auto$simplemap.cc:250:simplemap_eqne$1918 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1717' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1677' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1692'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1675 [1] = $auto$simplemap.cc:127:simplemap_reduce$1690 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1677' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1662' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1692'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1660 [1] = $auto$simplemap.cc:127:simplemap_reduce$1690 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1662' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1655' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1670'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1652 [1] = $auto$simplemap.cc:250:simplemap_eqne$1667 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1655' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1654' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1652 [0] = $auto$simplemap.cc:250:simplemap_eqne$1682 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1654' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1626' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1641'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1622 [2] = $auto$simplemap.cc:250:simplemap_eqne$1637 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1626' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1624' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1622 [0] = $auto$simplemap.cc:250:simplemap_eqne$1682 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1624' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1611' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1641'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1607 [2] = $auto$simplemap.cc:250:simplemap_eqne$1637 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1611' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1610' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1670'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1607 [1] = $auto$simplemap.cc:250:simplemap_eqne$1667 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1610' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1596' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1641'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1592 [2] = $auto$simplemap.cc:250:simplemap_eqne$1637 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1596' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1595' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1670'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1592 [1] = $auto$simplemap.cc:250:simplemap_eqne$1667 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1595' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1594' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1592 [0] = $auto$simplemap.cc:250:simplemap_eqne$1682 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1594' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1586' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1646'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1585 [0] = $auto$simplemap.cc:127:simplemap_reduce$1645 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1586' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1564' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1562 [0] = $auto$simplemap.cc:250:simplemap_eqne$1682 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1564' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1567' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1582'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1562 [3] = $auto$simplemap.cc:250:simplemap_eqne$1577 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1567' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1550' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1670'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1547 [1] = $auto$simplemap.cc:250:simplemap_eqne$1667 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1550' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1552' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1582'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1547 [3] = $auto$simplemap.cc:250:simplemap_eqne$1577 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1552' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1535' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1670'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1532 [1] = $auto$simplemap.cc:250:simplemap_eqne$1667 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1535' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1534' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1532 [0] = $auto$simplemap.cc:250:simplemap_eqne$1682 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1534' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1537' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1582'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1532 [3] = $auto$simplemap.cc:250:simplemap_eqne$1577 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1537' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1526' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1646'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1525 [0] = $auto$simplemap.cc:127:simplemap_reduce$1645 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1526' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1521' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1641'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1517 [2] = $auto$simplemap.cc:250:simplemap_eqne$1637 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1521' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1522' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1582'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1517 [3] = $auto$simplemap.cc:250:simplemap_eqne$1577 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1522' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1506' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1641'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1502 [2] = $auto$simplemap.cc:250:simplemap_eqne$1637 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1506' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1504' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1502 [0] = $auto$simplemap.cc:250:simplemap_eqne$1682 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1504' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1507' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1582'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1502 [3] = $auto$simplemap.cc:250:simplemap_eqne$1577 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1507' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1491' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1641'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1487 [2] = $auto$simplemap.cc:250:simplemap_eqne$1637 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1491' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1490' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1670'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1487 [1] = $auto$simplemap.cc:250:simplemap_eqne$1667 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1490' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1492' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1582'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1487 [3] = $auto$simplemap.cc:250:simplemap_eqne$1577 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1492' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1476' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1641'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1472 [2] = $auto$simplemap.cc:250:simplemap_eqne$1637 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1476' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1475' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1670'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1472 [1] = $auto$simplemap.cc:250:simplemap_eqne$1667 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1475' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1474' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1472 [0] = $auto$simplemap.cc:250:simplemap_eqne$1682 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1474' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1477' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1582'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1472 [3] = $auto$simplemap.cc:250:simplemap_eqne$1577 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1477' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1452' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1467'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1450 [1] = $auto$simplemap.cc:127:simplemap_reduce$1465 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1452' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1437' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1467'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1435 [1] = $auto$simplemap.cc:127:simplemap_reduce$1465 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1437' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1430' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1445'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1427 [1] = $auto$simplemap.cc:250:simplemap_eqne$1442 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1430' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1429' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1427 [0] = $auto$simplemap.cc:250:simplemap_eqne$1457 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1429' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1401' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1416'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1397 [2] = $auto$simplemap.cc:250:simplemap_eqne$1412 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1401' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1399' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1397 [0] = $auto$simplemap.cc:250:simplemap_eqne$1457 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1399' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1386' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1416'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1382 [2] = $auto$simplemap.cc:250:simplemap_eqne$1412 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1386' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1385' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1445'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1382 [1] = $auto$simplemap.cc:250:simplemap_eqne$1442 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1385' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1371' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1416'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1367 [2] = $auto$simplemap.cc:250:simplemap_eqne$1412 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1371' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1370' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1445'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1367 [1] = $auto$simplemap.cc:250:simplemap_eqne$1442 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1370' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1369' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1367 [0] = $auto$simplemap.cc:250:simplemap_eqne$1457 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1369' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1361' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1421'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1360 [0] = $auto$simplemap.cc:127:simplemap_reduce$1420 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1361' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1339' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1337 [0] = $auto$simplemap.cc:250:simplemap_eqne$1457 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1339' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1342' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1357'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1337 [3] = $auto$simplemap.cc:250:simplemap_eqne$1352 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1342' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1325' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1445'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1322 [1] = $auto$simplemap.cc:250:simplemap_eqne$1442 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1325' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1327' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1357'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1322 [3] = $auto$simplemap.cc:250:simplemap_eqne$1352 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1327' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1310' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1445'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1307 [1] = $auto$simplemap.cc:250:simplemap_eqne$1442 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1310' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1309' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1307 [0] = $auto$simplemap.cc:250:simplemap_eqne$1457 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1309' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1312' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1357'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1307 [3] = $auto$simplemap.cc:250:simplemap_eqne$1352 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1312' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1301' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1421'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1300 [0] = $auto$simplemap.cc:127:simplemap_reduce$1420 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1301' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1296' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1416'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1292 [2] = $auto$simplemap.cc:250:simplemap_eqne$1412 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1296' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1297' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1357'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1292 [3] = $auto$simplemap.cc:250:simplemap_eqne$1352 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1297' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1281' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1416'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1277 [2] = $auto$simplemap.cc:250:simplemap_eqne$1412 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1281' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1279' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1277 [0] = $auto$simplemap.cc:250:simplemap_eqne$1457 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1279' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1282' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1357'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1277 [3] = $auto$simplemap.cc:250:simplemap_eqne$1352 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1282' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1266' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1416'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1262 [2] = $auto$simplemap.cc:250:simplemap_eqne$1412 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1266' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1265' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1445'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1262 [1] = $auto$simplemap.cc:250:simplemap_eqne$1442 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1265' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1267' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1357'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1262 [3] = $auto$simplemap.cc:250:simplemap_eqne$1352 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1267' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1218' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1416'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1214 [2] = $auto$simplemap.cc:250:simplemap_eqne$1412 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1218' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1217' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1445'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1214 [1] = $auto$simplemap.cc:250:simplemap_eqne$1442 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1217' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1216' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1214 [0] = $auto$simplemap.cc:250:simplemap_eqne$1457 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1216' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1219' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1357'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1214 [3] = $auto$simplemap.cc:250:simplemap_eqne$1352 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1219' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1913' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1928'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1911 [1] = $auto$simplemap.cc:127:simplemap_reduce$1926 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1913' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1898' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1928'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1896 [1] = $auto$simplemap.cc:127:simplemap_reduce$1926 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1898' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1883' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1928'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1881 [1] = $auto$simplemap.cc:127:simplemap_reduce$1926 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1883' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1867' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1927'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1866 [0] = $auto$simplemap.cc:127:simplemap_reduce$1926 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1867' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1853' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1868'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1851 [1] = $auto$simplemap.cc:127:simplemap_reduce$1866 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1853' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1852' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1912'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1851 [0] = $auto$simplemap.cc:127:simplemap_reduce$1911 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1852' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1838' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1868'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1836 [1] = $auto$simplemap.cc:127:simplemap_reduce$1866 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1838' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1837' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1897'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1836 [0] = $auto$simplemap.cc:127:simplemap_reduce$1896 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1837' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1823' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1868'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1821 [1] = $auto$simplemap.cc:127:simplemap_reduce$1866 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1823' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1798' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1927'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1797 [0] = $auto$simplemap.cc:127:simplemap_reduce$1926 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1798' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1784' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1799'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1782 [1] = $auto$simplemap.cc:127:simplemap_reduce$1797 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1784' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1783' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1912'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1782 [0] = $auto$simplemap.cc:127:simplemap_reduce$1911 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1783' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1769' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1799'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1767 [1] = $auto$simplemap.cc:127:simplemap_reduce$1797 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1769' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1768' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1897'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1767 [0] = $auto$simplemap.cc:127:simplemap_reduce$1896 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1768' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1754' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1799'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1752 [1] = $auto$simplemap.cc:127:simplemap_reduce$1797 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1754' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1738' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1927'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1737 [0] = $auto$simplemap.cc:127:simplemap_reduce$1926 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1738' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1723' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1912'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1722 [0] = $auto$simplemap.cc:127:simplemap_reduce$1911 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1723' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1632' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1647'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1630 [1] = $auto$simplemap.cc:127:simplemap_reduce$1645 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1632' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1631' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1691'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1630 [0] = $auto$simplemap.cc:127:simplemap_reduce$1690 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1631' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1617' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1647'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1615 [1] = $auto$simplemap.cc:127:simplemap_reduce$1645 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1617' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1616' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1676'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1615 [0] = $auto$simplemap.cc:127:simplemap_reduce$1675 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1616' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1602' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1647'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1600 [1] = $auto$simplemap.cc:127:simplemap_reduce$1645 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1602' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1601' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1661'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1600 [0] = $auto$simplemap.cc:127:simplemap_reduce$1660 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1601' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1572' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1587'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1570 [1] = $auto$simplemap.cc:127:simplemap_reduce$1585 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1572' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1571' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1691'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1570 [0] = $auto$simplemap.cc:127:simplemap_reduce$1690 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1571' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1557' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1587'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1555 [1] = $auto$simplemap.cc:127:simplemap_reduce$1585 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1557' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1556' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1676'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1555 [0] = $auto$simplemap.cc:127:simplemap_reduce$1675 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1556' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1542' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1587'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1540 [1] = $auto$simplemap.cc:127:simplemap_reduce$1585 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1542' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1541' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1661'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1540 [0] = $auto$simplemap.cc:127:simplemap_reduce$1660 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1541' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1512' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1527'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1510 [1] = $auto$simplemap.cc:127:simplemap_reduce$1525 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1512' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1511' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1691'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1510 [0] = $auto$simplemap.cc:127:simplemap_reduce$1690 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1511' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1497' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1527'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1495 [1] = $auto$simplemap.cc:127:simplemap_reduce$1525 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1497' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1496' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1676'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1495 [0] = $auto$simplemap.cc:127:simplemap_reduce$1675 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1496' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1482' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1527'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1480 [1] = $auto$simplemap.cc:127:simplemap_reduce$1525 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1482' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1481' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1661'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1480 [0] = $auto$simplemap.cc:127:simplemap_reduce$1660 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1481' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1407' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1422'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1405 [1] = $auto$simplemap.cc:127:simplemap_reduce$1420 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1407' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1406' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1466'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1405 [0] = $auto$simplemap.cc:127:simplemap_reduce$1465 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1406' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1392' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1422'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1390 [1] = $auto$simplemap.cc:127:simplemap_reduce$1420 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1392' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1391' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1451'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1390 [0] = $auto$simplemap.cc:127:simplemap_reduce$1450 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1391' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1377' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1422'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1375 [1] = $auto$simplemap.cc:127:simplemap_reduce$1420 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1377' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1376' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1436'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1375 [0] = $auto$simplemap.cc:127:simplemap_reduce$1435 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1376' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1347' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1362'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1345 [1] = $auto$simplemap.cc:127:simplemap_reduce$1360 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1347' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1346' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1466'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1345 [0] = $auto$simplemap.cc:127:simplemap_reduce$1465 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1346' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1332' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1362'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1330 [1] = $auto$simplemap.cc:127:simplemap_reduce$1360 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1332' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1331' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1451'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1330 [0] = $auto$simplemap.cc:127:simplemap_reduce$1450 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1331' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1317' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1362'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1315 [1] = $auto$simplemap.cc:127:simplemap_reduce$1360 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1317' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1316' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1436'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1315 [0] = $auto$simplemap.cc:127:simplemap_reduce$1435 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1316' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1287' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1302'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1285 [1] = $auto$simplemap.cc:127:simplemap_reduce$1300 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1287' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1286' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1466'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1285 [0] = $auto$simplemap.cc:127:simplemap_reduce$1465 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1286' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1272' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1302'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1270 [1] = $auto$simplemap.cc:127:simplemap_reduce$1300 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1272' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1271' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1451'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1270 [0] = $auto$simplemap.cc:127:simplemap_reduce$1450 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1271' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1224' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1302'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1222 [1] = $auto$simplemap.cc:127:simplemap_reduce$1300 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1224' from module `\NRISC_REGs'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1223' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1436'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1222 [0] = $auto$simplemap.cc:127:simplemap_reduce$1435 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1223' from module `\NRISC_REGs'.
Removed a total of 149 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$3696'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3693'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\NRISC_REGs' to `<abc-temp-dir>/input.blif'..
Extracted 1664 gates and 2064 wires to a netlist network with 398 inputs and 384 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      227
ABC RESULTS:              AOI3 cells:       69
ABC RESULTS:              AOI4 cells:      192
ABC RESULTS:               MUX cells:      480
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:       12
ABC RESULTS:               NOT cells:       40
ABC RESULTS:              OAI3 cells:       13
ABC RESULTS:              OAI4 cells:       32
ABC RESULTS:                OR cells:       30
ABC RESULTS:        internal signals:     1282
ABC RESULTS:           input signals:      398
ABC RESULTS:          output signals:      384
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..
  removing unused non-port wire \REGS[10].
  removing unused non-port wire \REGS[11].
  removing unused non-port wire \REGS[12].
  removing unused non-port wire \REGS[13].
  removing unused non-port wire \REGS[14].
  removing unused non-port wire \REGS[15].
  removing unused non-port wire \REGS[8].
  removing unused non-port wire \REGS[9].
  removed 8 unused temporary wires.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \NRISC_REGs

3.22.2. Analyzing design hierarchy..
Top module:  \NRISC_REGs
Removed 0 unused modules.

3.23. Printing statistics.

=== NRISC_REGs ===

   Number of wires:               1109
   Number of wire bits:           1613
   Number of public wires:          40
   Number of public wire bits:     544
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1453
     $_AND_                        227
     $_AOI3_                        69
     $_AOI4_                       192
     $_DFF_P_                      352
     $_MUX_                        480
     $_NAND_                         6
     $_NOR_                         12
     $_NOT_                         40
     $_OAI3_                        13
     $_OAI4_                        32
     $_OR_                          30

3.24. Executing CHECK pass (checking for obvious problems).
checking module NRISC_REGs..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\NRISC_REGs':
  mapped 352 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_REGs..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_REGs.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\NRISC_REGs' to `<abc-temp-dir>/input.blif'..
Extracted 1101 gates and 1499 wires to a netlist network with 398 inputs and 384 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        9
ABC RESULTS:           AOI21X1 cells:       64
ABC RESULTS:             INVX1 cells:      143
ABC RESULTS:            MUX2X1 cells:       48
ABC RESULTS:           NAND2X1 cells:      452
ABC RESULTS:           NAND3X1 cells:      321
ABC RESULTS:            NOR2X1 cells:      165
ABC RESULTS:            NOR3X1 cells:       48
ABC RESULTS:           OAI21X1 cells:      513
ABC RESULTS:           OAI22X1 cells:       16
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:      717
ABC RESULTS:           input signals:      398
ABC RESULTS:          output signals:      384
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 1506 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port NRISC_REGs.REG_A using BUFX2.
Mapping port NRISC_REGs.REG_B using BUFX2.
Don't map input port NRISC_REGs.REG_D: Missing option -inpad.
Don't map input port NRISC_REGs.REG_Interrupt_flag: Missing option -inpad.
Don't map input port NRISC_REGs.REG_R1: Missing option -inpad.
Don't map input port NRISC_REGs.REG_RF1: Missing option -inpad.
Don't map input port NRISC_REGs.REG_RF2: Missing option -inpad.
Don't map input port NRISC_REGs.REG_RFD: Missing option -inpad.
Don't map input port NRISC_REGs.REG_Write: Missing option -inpad.
Don't map input port NRISC_REGs.clk: Missing option -inpad.
Don't map input port NRISC_REGs.rst: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NRISC_REGs..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NRISC_REGs.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NRISC_REGs'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NRISC_REGs..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

11. Printing statistics.

=== NRISC_REGs ===

   Number of wires:               1783
   Number of wire bits:           2212
   Number of public wires:        1783
   Number of public wire bits:    2212
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2164
     AND2X2                          9
     AOI21X1                        64
     BUFX2                          32
     DFFPOSX1                      352
     INVX1                         143
     MUX2X1                         48
     NAND2X1                       452
     NAND3X1                       321
     NOR2X1                        165
     NOR3X1                         48
     OAI21X1                       513
     OAI22X1                        16
     OR2X2                           1

End of script. Logfile hash: e0d2fbdd8b
CPU: user 1.40s system 0.02s, MEM: 42.96 MB total, 15.79 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 18% 16x opt_merge (0 sec), 15% 16x opt_clean (0 sec), ...
Cleaning up output syntax
ypostproc.tcl NRISC_REGs_mapped.blif NRISC_REGs /usr/local/share/qflow/tech/osu018/osu018.sh
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I NRISC_REGs_nofanout -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib  -b BUFX2 -i A -o Y tmp.blif NRISC_REGs.blif

Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 49 (load 886.644) from node _1272_,
driven by NOR2X1 with strength 58.1923 (fF driven at latency 100)
Top fanout load-to-strength ratio is 14.0122 (latency = 1401.22 ps)
Top input node fanout is 352 (load 9829.07) from node clk.
Warning 1: load of 335.271 is 5.8188 times greater than strongest gate NAND3X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 3: load of 529.46 is 9.06621 times greater than strongest gate NAND2X1
Warning 30: load of 566.032 is 9.72692 times greater than strongest gate NOR2X1
Warning 32: load of 825.4 is 14.184 times greater than strongest gate NOR2X1
425 gates exceed specified minimum load.
314 buffers were added.
52 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2122    	Out: 2070    	-52
	"2" gates	In: 42    	Out: 75    	+33

Number of gates changed: 366
gates resized: 366
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 335.475) from node _1266_,
driven by NAND2X1 with strength 58.3992 (fF driven at latency 100)
Top fanout load-to-strength ratio is 5.36575 (latency = 536.575 ps)
Top input node fanout is 49 (load 457.254) from node clk.
Warning 1: load of 314.136 is 1.39623 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 50: load of 339.345 is 1.50828 times greater than strongest gate BUFX4
Warning 51: load of 339.481 is 1.50888 times greater than strongest gate BUFX4
Warning 52: load of 345.475 is 1.53552 times greater than strongest gate BUFX4
Warning 53: load of 345.475 is 1.53552 times greater than strongest gate BUFX4
Warning 76: load of 309.279 is 5.29594 times greater than strongest gate NAND2X1
Warning 177: load of 319.522 is 5.47134 times greater than strongest gate NAND2X1
Warning 178: load of 323.356 is 5.53698 times greater than strongest gate NAND2X1
520 gates exceed specified minimum load.
7 buffers were added.
314 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2070    	Out: 2070    	+0
	"2" gates	In: 389    	Out: 75    	-314
	"4" gates	In: 1    	Out: 315    	+314
	"8" gates	In: 18    	Out: 18    	+0

Number of gates changed: 321
gates resized: 321
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 447.29) from node _1266_,
driven by NAND2X1 with strength 58.3992 (fF driven at latency 100)
Top fanout load-to-strength ratio is 5.36575 (latency = 536.575 ps)
Top input node fanout is 14 (load 195.797) from node REG_Interrupt_flag.
Warning 1: load of 308.788 is 1.37246 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 314.088 is 1.39602 times greater than strongest gate BUFX4
Warning 6: load of 316.788 is 1.40802 times greater than strongest gate BUFX4
Warning 14: load of 319.648 is 1.42073 times greater than strongest gate BUFX4
Warning 53: load of 425.95 is 1.89321 times greater than strongest gate BUFX4
Warning 267: load of 451.16 is 2.00526 times greater than strongest gate BUFX4
Warning 268: load of 451.296 is 2.00586 times greater than strongest gate BUFX4
Warning 269: load of 457.29 is 2.0325 times greater than strongest gate BUFX4
Warning 327: load of 309.279 is 5.29594 times greater than strongest gate NAND2X1
Warning 428: load of 319.522 is 5.47134 times greater than strongest gate NAND2X1
Warning 429: load of 323.356 is 5.53698 times greater than strongest gate NAND2X1
771 gates exceed specified minimum load.
0 buffers were added.
7 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2070    	Out: 2070    	+0
	"2" gates	In: 82    	Out: 75    	-7
	"4" gates	In: 315    	Out: 322    	+7
	"8" gates	In: 18    	Out: 18    	+0

Number of gates changed: 7
gates resized: 7
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 447.29) from node _1266_,
driven by NAND2X1 with strength 58.3992 (fF driven at latency 100)
Top fanout load-to-strength ratio is 5.36575 (latency = 536.575 ps)
Top input node fanout is 14 (load 195.797) from node REG_Interrupt_flag.
Warning 1: load of 300.461 is 1.33545 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 8: load of 308.788 is 1.37246 times greater than strongest gate BUFX4
Warning 9: load of 314.088 is 1.39602 times greater than strongest gate BUFX4
Warning 13: load of 316.788 is 1.40802 times greater than strongest gate BUFX4
Warning 21: load of 319.648 is 1.42073 times greater than strongest gate BUFX4
Warning 60: load of 425.95 is 1.89321 times greater than strongest gate BUFX4
Warning 274: load of 451.16 is 2.00526 times greater than strongest gate BUFX4
Warning 275: load of 451.296 is 2.00586 times greater than strongest gate BUFX4
Warning 276: load of 457.29 is 2.0325 times greater than strongest gate BUFX4
Warning 334: load of 309.279 is 5.29594 times greater than strongest gate NAND2X1
Warning 435: load of 319.522 is 5.47134 times greater than strongest gate NAND2X1
Warning 436: load of 323.356 is 5.53698 times greater than strongest gate NAND2X1
778 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 2070    	Out: 2070    	+0
	"2" gates	In: 75    	Out: 75    	+0
	"4" gates	In: 322    	Out: 322    	+0
	"8" gates	In: 18    	Out: 18    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs
Files:
   Verilog: /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.rtl.v
   Verilog: /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.rtlnopwr.v
   Spice:   /home/jcscheunemann/Work/NRISC-Aurora/Hardware-design/Testes/Teste_REGs/NRISC_REGs.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on s√°b jan 13 16:59:51 -02 2018
